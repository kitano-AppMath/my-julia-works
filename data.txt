 これなら分かる統計 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 これなら分かる統計 最終更新 記事の内容 例題 線形回帰問題 問題設定 余談 最尤推定 統計の考え方 推定・予測の流れ 事前分布の設定 事後分布の実現 事後分布の利用 余談 モデル選択 余談 怪しげな統計 余談 統計物理との関連 推定をやってみよう 確率モデルの設定 事前分布の設定 尤度の計算 事後分布の計算 事後分布の観察 予測分布の計算 予測分布の観察 ソースコード 共通のコード アニメーションのコード 今回は 線形回帰を例題に 統計学を概観していきましょう 例題 線形回帰問題 問題設定 次のようなデータを考えます データ点が点あります このデータを用いて予測を行います 次に同じような入力が与えられたとき 出力を予測します データを見ると 直線的な関係が読み取れます ということで このデータをよく説明する直線を求めましょう よって 線形回帰問題として予測を行います 直線を求めたいので 式にしておきましょう もしこの直線がデータをよく近似するならば データ点の座標は次のように近似できます ここで データ点の数を データ点を とします しかし データ点は厳密に直線上にあるわけではないので その差をとおきます よって となります さらに次のような仮定をおきます それでは を求めましょう これが求まれば 直線が特定できます 直線が特定できれば その式をもとに予測ができます ここでは統計を用いて推定します 余談 最尤推定 ここでは統計を用いますが 他にも方法はあります 最尤推定です 最尤推定とは 尤度関数を最大にするパラメータ値を推定値とする方法です 尤度関数はパラメータのデータへの適合具合を表します 今回は最尤推定は用いません 統計の考え方 推定・予測の流れ 統計学では 観測値が真の分布からの実現値であると考えます この真の分布を推測することが目標です 推定・予測の流れは次の通りです 確率モデルを設定するこのモデルで真の分布を推測したい 事前分布を設定する決め方は様々存在する 尤度関数を計算する確率モデルから得られる 事後分布を計算するパラメータの推定値が得られる 予測分布を計算する予測まで行う場合には計算する 事前分布の設定 事前分布の決め方には様々あります 現時点で「これが決定版」というものは無さそうです 以下のような決め方があります 計算しやすいように共役事前分布を用いる パラメータ値に関する事前知識を利用する 無情報事前分布や弱情報事前分布を用いる 事後分布の計算 事後分布は普通 次のの定理から計算しますの定理を表に出さない議論もあります は事後分布 は尤度関数 は事前分布を表します また をデータとします ただし 事後分布が複雑で扱いにくい場合もあります この場合 や変分推論などの近似推論法を用います 事後分布の利用 事後分布はつの決まった確定値というわけではありません パラメータに関する様々な情報を含んでいるため 利用法も様々あります 例えば 次のような方法があります 事後分布の平均をパラメータの推定値とする 事後分布を最大にするパラメータ値を推定値とする のサンプル平均を推定値とする 余談 モデル選択 データの解析に対して 確率モデルは複数考えられます これらのモデルのうちどれが最適かを選ぶ方法があります 次のつが代表的なものです 周辺尤度を最大化する 情報量規準 を用いる クロスバリデーション を用いる 余談 怪しげな統計 数理的な統計と以下の言説には関係がありません この記事でも触れません 頻度主義は間違っており 主義が正しい 統計は間違っており 頻度主義が正しい 哲学的に統計は間違っているまたは正しい 人間の脳は的である 余談 統計物理との関連 統計と統計物理には密接な関係があります 分配関数などの用語が普通に使用されます また の一つ モンテカルロ法では 系も出現し 解析力学とも関係があります 推定をやってみよう 例題に戻ります 推定・予測を実践します 確率モデルの設定 確率モデルは 例題での仮定から自然に出てきます 先ほどの例題では としました したがって を確率モデルとします 事前分布の設定 事前分布は 正規分布にします 尤度の計算 尤度関数を計算します 尤度関数は確率モデルにデータを代入したものの積で定義されます 今回の例題の場合は次のようになります 事後分布の計算 の定理を用いて事後分布を計算します 計算過程は省略しますが 次のようになります 事後分布の観察 事後分布の様子を可視化します コードの実行結果 赤い線は真の直線です 最初はデータ点がつだけです この状態で事後分布の平均と共分散行列を計算します 計算した平均と共分散行列をもとに 正規分布からサンプルします つまり 事後分布からのサンプルです サンプルを個得ます これらのサンプルを用いて 直線を描画したものがグレーの直線です そして データ点を個追加して同じことを繰り返します つまり データ点を追加するごとに本の直線をサンプルします データ点が追加されるほど 各サンプルが真の直線に近づきます つまり データ点が増えるほど推定の精度が上がります 事後分布を別の観点から眺めてみましょう コードの実行結果 黒い部分は事後密度関数の値の大きい部分を表します このアニメーションでも データ点を追加するごとに事後分布を計算します データ点が増える度に黒い部分の範囲が小さくなります つまり データ点が増えるほど 不確かさが減少します 予測分布の計算 予測分布を計算します 予測分布は次式で定義されます これを計算すると 次のような正規分布になります 計算過程は省略します は新しい入力で はそれに対する予測値です 予測分布の観察 予測分布を観察しましょう コードの実行結果 赤い直線は真の直線です このアニメーションでも データ点を追加するごとに予測分布を計算します 青線は予測分布の平均です また 緑色部分は「平均 標準偏差」の幅を表します データ点がない部分は標準偏差が大きく データ点が追加されると標準偏差が小さくなります つまり データが多くなるほど不確かさが減少します 平均は真の直線に近づいているので 予測の精度は段々上がります ソースコード 共通のコード コード インポート コード データの作成 サンプル数 ノイズの精度と事前分布の精度 α β 全データ数 パラメータの真値 ₀ ₁ 訓練データとテストデータの作成 ₀ ₁ β コード 関数の作成 直線 多変量正規分布からのサンプル 分解を用いて 正規分布 からサンプルする 事後パラメータの計算 α β データ数 和 二乗和 積の和 精度行列 αβ β β αβ 平均 β β 予測分布のパラメータ α β 事後パラメータ α β 平均 β 正規分布 ₁ ₂ μ Σ ベクトル化 ₁ ₂ μ Σ μ アニメーションのコード コード 事後分布のアニメーション アニメーション データ数を増やしながら逐次的に計算 訓練データの途中までを用いて事後分布を計算する 真値のプロット ₁ ₀ 番目までのデータから計算する事後パラメータ α β 各サンプルから本の直線をプロット パラメータの取得 傾きと切片 ₀ ₁ プロット ₁ ₀ データの散布図 アニメーションに追加 保存 コード 事後分布のアニメーション アニメーション ₁ ₂ 真値のプロット 訓練データ 番目までのデータから計算される事後パラメータ α β 事後分布の確率密度関数の計算 ₁ ₂ ₁ ₁ ₂ ₂ アニメーションに追加 保存 コード 予測分布のアニメーション アニメーション データ数を増やしながら逐次的に計算 訓練データの途中までを用いて事後分布を計算する 真値のプロット ₁ ₀ データのプロット 予測分布 α β 予測平均のプロット アニメーションを保存 保存 記事一覧に戻る 
 制約なし最適化アルゴリズムの基礎 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 制約なし最適化アルゴリズムの基礎 最終更新 記事の内容 例題 関数 数値実験 最急降下法 法 ソースコード 共通のコード 最急降下法のコード 法のコード 今回は 代表的な制約なし最適化アルゴリズム 最急降下法と法を実装します 例題 関数 次の関数を考えます これはの関数と呼ばれます この関数の最小点を求めましょう 解析的に求めると 最小点は です これを数値計算で求めます 勾配と行列を計算しておきます 数値実験 概要 次の制約なし最適化問題を考えます 最小化 この問題を解くためのアルゴリズムはいくつか知られています ここでは 最急降下法と法を用います これらの解法は直線探索アルゴリズムと呼ばれます 一般に 直線探索アルゴリズムは次の更新式によって極小値に収束する点列を構成します 最急降下法の場合は とし 法の場合は とします また は次の条件を満たすように選びます は定数で にすることが多いようです以下の実験では としています これを実装するために 今回はバックトラッキングを用います バックトラッキングは ある値から始めて 上の不等式を満たすまでの値を減少させていく方法ですコード参照 最急降下法 最急降下法を実行します 以下が実行結果です 初期値は からはじめて 目的関数の勾配のノルムが を下回る もしくは回を超えるまで反復を続けました 実際には 反復で収束しました また 真の解に収束しました 以下の画像は 初期値青丸から 数値解赤丸までの軌跡を示したものです コードの実行結果 ∇ 下図は 関数値と勾配のノルムの値の変化を示したものです コードの実行結果 法 最急降下法を実行します 以下が実行結果です 条件は最急降下法と同じです 初期値は からはじめて 目的関数の勾配のノルムが を下回る もしくは回を超えるまで反復を続けました 実際には 反復で収束しました また 真の解に収束しました 以下の画像は 初期値青丸から 数値解赤丸までの軌跡を示したものです コードの実行結果 ∇ 下図は 関数値と勾配のノルムの値の変化を示したものです コードの実行結果 ソースコード 共通のコード コード インポート コード 関数の用意 バックトラッキング α₀ ρ ∇ 初期化 α α₀ 更新 α α∇ α ρα α 最急降下法 ϵ ₀ α ∇ 初期化 ₀ α ₀ ∇ ∇₀ ∇ 保存用 ₀ α ∇ 初期値の保存 ∇ ∇ 反復回数 収束判定 結果保存用 α α ∇ ∇ 反復計算 局所最小値ならば抜け出す ∇ 最急降下法の実行 コード 最急降下法の実行とプロット パラメータと結果 ₀ ₀ ∇ プロット ₀ コード 最急降下法の結果をプロット ∇ ∇ 法の実行 コード 法の実行 パラメータと結果 ₀ ₀ ∇ プロット ₀ コード 法の結果をプロット ∇ ∇ 記事一覧に戻る 
 力学系を観察しよう 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 力学系を観察しよう 最終更新 記事の内容 次元力学系 方程式 方程式 線形化 固有値による分類と相図 負の実根がつのとき 負の実根がつのとき 実部が負の複素共役根のとき 純虚数根のとき 実部が正の複素共役根のとき 正の実根がつのとき 正の実根がつのとき ソースコード 共通のコード 相図の描画 今回は 方程式を定性的に解析します 次元力学系 方程式 方程式 次元力学系の例として 方程式を考えます 次式の通りです 階微分方程式のままでは扱いにくいので 次のように変形します まず の階微分を表します すると 方程式は次のような微分方程式系になります 力学系の解析では主に 不動点やその周りでの軌道に関心があります そこでこの方程式の不動点に注目します 方程式の不動点は原点のみです 線形化 非線形方程式を取り扱うのは一般に困難です そこで不動点の周りで線形化します 一般には行列を計算しますが 今回は式に形から簡単に求まります 不動点である原点付近では非線形項の寄与は小さいことを期待して 次のように近似します 固有値の値によっては この近似は破綻します これは微分方程式の教科書に出てくる線形系です 原点付近の軌道を求めるには 適当に初期値を与えた初期値問題を解けば良いわけです ただし この系の解法には行列の指数関数などが出てきて 複雑です 一般に解は肩に固有値をのせた指数関数の一次結合です よって 固有値の正負 相対的な大小が分かれば大まかな解析は可能です 以下 固有値を見ることで 方程式を解析します 固有値による分類と相図 線形系の形から ベクトル場（相図 相平面図）が描けます また 数値解法を利用すれば元の非線形系の軌道計算も簡単にできます 以下 固有値の値で分類して 数値解 および相図を示します 以下の図では 赤丸が不動点 青線が数値解 黒矢印がベクトル場です 数値解法として 段次 法を用いました 反復回数は回 刻み幅は です 負の実根がつのとき このとき μ です 固有値は負なので 指数関数的に不動点に引き寄せられます 横方向に横切るのが固有ベクトル方向です コードの実行結果 負の実根がつのとき このとき μ です 線形化した時の行列のランクがつだけ落ちます 原点付近では原点に巻きつくような形になります コードの実行結果 実部が負の複素共役根のとき このとき μです 原点に吸い寄せられるような軌道です コードの実行結果 純虚数根のとき このとき μです 線形化したものと軌道がずれています ベクトル場によれば不動点の周りを周期的に回転する軌道が予測されますが 数値解は不動点に吸い寄せられています これは線形系で無視した非線形項の影響です コードの実行結果 実部が正の複素共役根のとき このとき μです 軌道が巻きつくリミットサイクルが観察できます コードの実行結果 正の実根がつのとき このとき μです こちらもリミットサイクルが観察できます コードの実行結果 正の実根がつのとき このとき μです こちらもリミットサイクルが観察できます コードの実行結果 ソースコード 共通のコード コード インポート コード 関数などの用意 右辺関数の線形化 μ μ 右辺関数 μ μ グラフの端 法のパラメータ 反復回数 刻み幅 ₀ 初期値 段次法のステップ μ の更新 ₁ μ ₂ ₁ μ ₃ ₂ μ ₄ ₃ μ との更新 ₁ ₂ ₃ ₄ 法によるシミュレーション ₀ μ 変数の初期化 ₀ ₀ 反復計算 との更新 μ 更新値の保存 プロット用のベクトルを作成する との範囲 始点 始点の配列 方向ベクトルのタプル 相図の描画 コード 負の実根がつのとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 負の実根がつのとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 実部が負の複素共役根のとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 純虚数根のとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 実部が正の複素共役根のとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 正の実根がつのとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 コード 正の実根がつのとき パラメータ値 μ ベクトル μ 相空間 μμ ₀ ₀ 法 ₀ μ プロット 保存 記事一覧に戻る 
 方程式 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 方程式 最終更新 記事の内容 方程式 固有値による解析 アトラクタの観察 時系列のプロット 写像 カオス的な振る舞い ソースコード 共通のコード その他のプロット 今回は方程式を定性的に解析します 方程式 方程式は次式の系です 以下 つのパラメータの値を次のように固定します 固有値による解析 この方程式の不動点はつです それぞれの不動点の周りで系を線形化し 固有値を数値的に求めると次のようになります よって つ目の不動点を除いて 不安定な不動点です アトラクタの観察 方程式の軌道を描いてみます 軌道の計算には段次 を用いました 反復回数は 回 刻み幅は 初期値は としました 以下は計算結果をプロットしたものです 有名なストレンジアトラクタが観察できます 軌道は周期的ではなく カオス的な振る舞いを示します コードの実行結果 時系列のプロット 時系列変化を調べます 以下に との変化を示します に関しては次節で示します コードの実行結果 との時系列変化は一致しているように見えます 実際には少しずれています また 正の部分と負の部分を行き来しています 写像 の極大点の変化を追ってみます コード の結果の図は 極大点オレンジ色の位置を表しています コードの結果は の極大点のみを取り出し 次の極大点との組を点列としてプロットしたものです この写像 を写像といいます 図を見ると 直線的に右肩上がりになっている部分があります この部分は恒等写像に見えるので 写像の不動点が存在を示唆します コードの実行結果 コードの実行結果 コードの実行結果 ここまでパラメータを固定していました を動かしたときの軌道を観察すると カオス的な振る舞いが観察できます 次の図は 各の値横軸に対して の極大値縦軸をプロットしたものです 白く抜けている部分があります 縦に黒点が散らばっているほど 軌道は極大点周りで様々な値をとります 逆に 白く抜けている部分では軌道がほぼ同じ点を通ります これは写像がいくつかの不動点や周期点を持つことに対応します 以下の図でこれらの事実を観察します 下図から 付近と以降は軌道が重なっていると予想されます なお 付近のように 点に潰れている部分と つに分かれている場合があります つに分かれている場合には 周期的につの値をとり続けます コードの実行結果 以下は に固定した場合の種々のプロットです 下の写像は不動点を持ちます コードの実行結果 の軌道も同じ値をとり続けます コードの実行結果 軌道がほぼ重なっています コードの実行結果 カオス的な振る舞い 方程式はカオス的な振る舞いを示します これは 初期値鋭敏性からも分かります 初期値を少しだけずらしたつの軌道を追ってみましょう 以下の図は つの初期値 から出発したつの軌道の差のノルムをプロットしたものです 時間発展に伴って 差はどんどん大きくなっていきます 対数プロットで直線的に変化しているので 指数関数的に差が広がります コードの実行結果 ソースコード 共通のコード コード インポート コード 関数などの用意 パラメータ σ 法のパラメータ 反復回数 刻み幅 ₀ 初期値 右辺関数 σ σ 段次法のステップ σ の更新 ₁ σ ₂ ₁ σ ₃ ₂ σ ₄ ₃ σ の更新 ₁ ₂ ₃ ₄ 法によるシミュレーション ₀ σ 変数の初期化 ₀ ₀ 反復計算 との更新 σ 更新値の保存 極大点のインデックスを探す 極大なら追加 その他のプロット コード アトラクタ 法 ₀ σ コード との時系列 時系列のプロット コード 写像 次項との関係 コード の時系列 時系列のプロット コード 断面とアトラクタ 法 ₀ σ コード パラメータを変化させる の最大値 プロット 各における極大値の計算 ₀ 軌道を計算する ₀ σ ₀ 極大となるインデックス 保存 ₀ 保存 コード 閉軌道のプロット の値を固定する ₀ 法により軌道を計算 ₀ σ ₀ 写像のプロット 時系列のプロット 極大点をオレンジで示す 保存 コード カオス的な振る舞い 初期値を少しずらす ₀ ₀ それぞれの初期値で計算する ₀ σ ₀ σ 軌道の差のノルムを時系列プロット 記事一覧に戻る 
 分布の意味とは 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 分布の意味とは 最終更新 記事の内容 定義と性質 定義 密度関数の観察 直感的な意味 ソースコード 共通のコード 密度関数のプロット 今回は分布について解説します 今回はとりあえず視覚化のみ また時間があればサンプリングについても解説したいな未定 定義と性質 定義 分布の定義 が を満たすとする 正の成分からなるパラメータ に対して 確率密度関数が で定義されるとき この分布を分布という 密度関数の観察 分布の密度関数を観察します まずは等方的な場合を観察します つまり αの成分が全て等しい場合です プロットのタイトルのαの値は その共通の値です コードの実行結果 次はヒートマップを見てみましょう 上とほとんど同じだけど コードの実行結果 次に 必ずしも等方的でない場合を見てみましょう 分布からのサンプルを散布図で描きます プロットのタイトルはαの値を示しています このようにサンプルは単体上に分布します αの値が大きい方にサンプルが集中します また αの値が大きいほど 真ん中に集中します コードの実行結果 この単体の表面のみを取り出してみましょう 図では少し√倍拡大しています コードの実行結果 この表面を取り出す作業にはちょっとした座標変換が必要です 計算は面倒なので省略します 変換の概要は次の通りです 直感的な意味 分布はその条件から 確率ベクトルの従う分布であることが分かります パラメータαは 観測数のような役割を果たします 観測数に偏りがあれば その方向にサンプルが偏ります 一方 どの観測数も同じくらいであれば 真ん中ら辺に散らばって 曖昧な状態になります ソースコード 共通のコード コード インポート コード 密度関数の定義 密度関数 α α α α 密度関数のプロット コード プロットのアニメーション プロット範囲 ₁ ₂ 初期化 αを変化させる α α α α α α ₁ ₂ ₁ ₂ α α ₁ ₂ 保存 コード ヒートマップのアニメーション プロット範囲 ₁ ₂ 初期化 αを変化させる α α α α α α ₁ ₂ ₁ ₂ α α ₁ ₂ 保存 コード 次元の散布図 αの候補 α 散布図 α α 保存 コード 次元の散布図 αの候補 α 散布図 α α 保存 参考文献 佐藤一誠 トピックモデルによる統計的潜在意味解析 コロナ社 初版第刷 記事一覧に戻る 
 入門 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 入門 最終更新 記事の内容 をどこで使うか 動機付け 概要 の基礎理論と設計指針 連鎖 定常分布と極限分布 収束性 詳細釣り合い条件 具体的な手法 法 サンプラー 法 技術的な注意点 収束判定 微分方程式の数値解法 の実装 例 簡易的な 法の実験 例 サンプラーとの比較アニメーション ソースコード インポート 微分方程式の数値解法 例のコード 例のコード 理論から技術的な部分まで広く解説した記事を書いてみました 間違いがあれば教えていただきたいです（で） サンプルコードは過去に書いたものを引っ張ってきました 書き方がバラバラだったりします 不具合・間違い等あれば 時々更新するつもりです 詳しく かつ正しい内容は参考文献をご覧ください をどこで使うか 動機付け 連鎖モンテカルロ法は ある分布からのサンプル（分布の実現値たち）を計算する手法の総称です 総称なので 何種類もあります 代表的なものは「具体的な手法」の節で取りあげます 得られたサンプルは連鎖になっています つまり 直前に計算したサンプルにのみ依存します ある分布というのは データを解析する側が サンプルを得ようとしている分布です 以下 「目的の分布」と呼ぶことにします 以下は を使いたい場面の例です 推論を行っていて 事後分布の平均を計算したい しかし 事後分布は式が複雑で 手計算では対処できない 予測分布の対数の期待値を計算する必要が出てきた しかし 予測分布は式が複雑で 手計算では対処できない 事後分布の標準偏差を計算することで 推定の不確かさを評価したい しかし 事後分布は式が複雑で 手計算では対処できない 上の場面の共通点は 手計算では対処できないくらい複雑な 積分計算が必要という点です こんな時に役立つのがです は 分布からの実現値を使って 平均や期待値を近似計算します うまくいけばそこそこの精度で計算できます この記事では の基本的な考え方 具体的な計算方法等をざっくり解説します 概要 の概要を説明します 例えば データを解析する人が 次のような期待値を計算するとします は目的の分布の密度関数とします もし 目的の分布からのサンプルが手に入れば 次のような近似計算が可能です 近似の精度をよくするためには 分布内を満遍なく探索してサンプルが欲しいところです しかし 計算時間や記憶量の観点から なるべく効率的に計算できた方が良いです そこで に期待する挙動は以下の通りです 積分の値に大きく寄与する部分 つまり確率の大きい部分まで移動する 確率の大きい部分まで移動したら その周辺をうろちょろする 移動途中は初期値の影響を受けており 目的の分布からのサンプルではありません 段々と目的の分布に近づきます 移動が完了して ある程度サンプルが集まれば 目的の分布に落ち着いていると考えられます 分布が落ち着く時 この分布を定常分布と言います また 確率の大きい部分をうろちょろするという期待に応えるために 連鎖を用います 連鎖は直前の状態にのみ依存して移動します 以上より の基本方針は次のように要約できます 「目的の分布を定常分布とする連鎖を構成する」ことです の基礎理論 連鎖 まず のアルゴリズムがどのように設計されていつかを概観します 前節で触れたように の基本方針は目的の分布を定常分布とするような連鎖を構成することです まずは この連鎖について簡単に定義します 曖昧で不正確な定義なので 詳しくは参考文献をご覧ください 不正確な定義 確率変数列が遷移核をもつ連鎖であるとは 任意の自然数 任意のに対して 次式を満たすことである 上式を で表す 定義から分かるように 連鎖に関する情報は遷移核に集約されています したがって の基本方針をより詳しく言えば 目的の分布を定常分布とするような連鎖の遷移核を構成することです 遷移核は連鎖の移動ルールを確率的に定めたものです そして の各手法の違いは遷移核の違いです この遷移核をうまく構成することで つのアルゴリズムを得ることができます 定常分布と極限分布 前節では の設計指針について概観しました ここでは のユーザ側の視点に立って考えてみましょう データの解析に際して 設計されたアルゴリズムは信頼に足るものでしょうか ユーザー側が信頼性を確認するにはどうすれば良いでのしょうか まず 手がかりとなる定常分布を定義します 不正確な定義 分布は 任意のに対して次式を満たすとき 不変分布であるという 定常分布と似た概念に 極限分布というものもあります 定義は以下の通りです 不正確な定義 分布は 任意の 任意のに対して次式を満たすとき 極限分布であるという 実は ある条件の元で定常分布と極限分布は一致します 一致すると のユーザーにとって何が嬉しいのでしょうか 極限分布は遷移核を何度も作用させた結果得られる分布です 遷移核は移動のルールを定めたものですから 極限分布とは 同じルールを何度も適用した結果です もし遷移核の構成方法移動ルールをアルゴリズムとして記述できれば 反復することで定常分布が得られることになります そもそも定常分布が目的の分布と一致するように遷移核を構成していました したがって 反復の結果として目的の分布が得られます つまり により「目的の分布を定常分布とする連鎖」の極限分布として 目的の分布を得ることができます 手計算で扱うことが難しい分布であっても 移動のルールをうまく定めれば計算機で計算できる これがの威力です ユーザー側としては 「ある条件」とやらを確認しておけば安心です その条件を次節で紹介します 収束性 本節で 定常分布と極限分布が（存在するとして ）一致するための十分条件を提示します 詳しくは参考文献を参照してください 一致するための条件は既約性と非周期性です 不正確な定義 不変分布をもつ連鎖は 任意の初期状態に対して が正である集合に属する確率が正であるとき 既約であるという 連鎖は ある一定間隔で訪れる状態が存在するとき 周期的であるという 周期的でないとき 非周期的であるという 既約性は どこから出発しても 確率が正の場所へたどり着くことができる ということです 満遍なくサンプリングしたいなら当然の要請です 非周期性の要請も 偏ったサンプルを避けるためです 定理 連鎖が不変分布をもち 既約かつ非周期的であるとき 不変分布は一意的であり 極限分布は不変分布に一致する 以上より の個々のアルゴリズムは 以下のつを満たしていればとりあえずです アルゴリズムによって得られる数またはベクトル列は 連鎖である その連鎖は目的の分布を定常分布とする その連鎖は既約である その連鎖は非周期的である 詳細釣り合い条件 「アルゴリズムによって生成された連鎖が 目的の分布を定常分布とする」ことを保証する 十分条件が存在します これを詳細釣り合い条件といいます アルゴリズムが詳細釣り合いを満たしてくれれば安心です 定理 遷移核に対して 関数が任意の に対して を満たすとき はこの連鎖の定常分布の密度関数である 具体的な手法 法 法（以下 法）はの中でも基本的なアルゴリズムです 導出過程の簡単な説明が にあります アルゴリズムは以下の通りです 法変数 法では 目的の分布をよく近似するような提案分布 を用います の部分にサンプルを代入して 前回のサンプル値に依存したサンプルを提案します 受容確率によって 遷移のバランスをとるよう調節できます の具体的な形は 詳細釣り合い条件から得られます 提案分布の選び方に関しては様々な研究があります 興味があれば調べてみてください サンプラー サンプラーも基本的なアルゴリズムです サンプルを行いたい変数が複数あるとき 他を全て固定して 条件付き分布から変数ずつサンプルします 条件付き分布からのサンプリングが簡単な場合に有効です 階層モデルなど 条件付き分布を用いるモデルではよく用いられます アルゴリズムは以下の通りです 以下のアルゴリズムでは 変数を任意につのブロックに分けています サンプリングしやすい分け方を勝手に採用すればです サンプラー多変数 サンプラーのアルゴリズムは素直です 全ての変数を動かすのが難しいなら 他を全部固定してつだけ動かせば良いわけです また サンプラーは法の特別バージョンです 法として見るならば 受容確率はです 法 は少々複雑ですが 効率よくサンプルできます サンプラーとの比較を例で扱います アルゴリズムは以下の通りです 法変数 まず 基本的なアイデアを述べます 次のような密度関数で表される分布からのサンプルが欲しいとします このとき とおくと と書けます ここで 新しい変数を導入して と定めます よって となります よって サンプル が得られれば のサンプルを無視して サンプルが得られます 一見ややこしいように見えます しかし を導入することで効率がよくなります 鍵となるのは次の系です 系 次の に対応する系は 次式で表される ただし とする 以下 を終端時間と呼ぶ このように を系と関連付けます 物理的な系と解釈することで 微分方程式のシミュレーションが可能になります 微分方程式を解くことで より遠くの状態にまでアクセスすることができます もちろん 微分方程式によりアクセスできる状態は一部分です そこで に確率的な揺らぎを加えて 反復ごとに異なる系をシミュレートします これが アルゴリズム冒頭の 標準正規分布からのサンプルです 変数は の値を変える役割を担います 問題は どうやって系をシミュレートするかです 微分方程式を解くのに 数値解法の一種 法 法とも呼ぶを用います 疑似コードでは関数として与えています なぜ 法が選ばれたのか 理由は 法が系の性質を保ったまま計算してくれるからです ここでいう系の性質とは 以下のつです エネルギー保存性 体積保存性 時間反転性 エネルギー保存性については 「微分方程式の数値解法」の節で解説します その他の性質についてはまた実験しようと思います 法の更新式は以下の通りです これを適当な刻み幅 適当な終端時間まで反復して 次の候補を選びます これが関数 です 記号に関しては 「微分方程式の数値解法」の節を参照してください 法 法のステップ 技術的な注意点 では極限分布に収束するまでに時間がかかります 最初のうちは 初期値の影響を受けており 定常分布に収束していません この部分を定常分布からのサンプルと見做すのは危険です このように 初期値の影響を受けて 定常分布に収束していない期間を 期間といいます 実際にを使う際には 期間のサンプルは捨てます ここで どれくらいの期間を 期間と見做すか という問題が生じます これはケースバイケースです 個人的には 全サンプル数の分のを捨てることにしています 全部で サンプルあれば サンプルを捨てます 残りの サンプルを定常分布からの実現値と考えます 収束判定 では極限分布を計算します 計算機の上ではサンプル数を無限大にすることはできないので 収束を判定する指標が欲しいところです 代表的なものをいくつか挙げます なお 収束診断に関してはいくつかサーベイ論文が出ているので 検索してみて下さい 時系列プロット 標本自己相関関数のプロット の診断方法 の方法 時系列プロットは 横軸に時間反復数 サンプル値を縦軸にとって系列をプロットする方法です うまくサンプルできていれば 縦にギザギザした特徴的なプロットが得られます 同じ部分を何度もサンプルしたり 規則性があるなど 何か異常があればすぐに分かります 一方 一度にプロットできるのは変数分だけという制約があります 多変数の場合は別の方法が必要です 以下は 例後ほど登場で用いた時系列プロットです コードの実行結果 標本自己相関関数は次のように定義されます 定義 時系列データに対して 標本自己共分散関数を次のように定義する をラグという ここで は標本平均である このとき 標本自己相関関数を 次式で定める 自己相関関数を見ると 数個前のサンプルの影響をどの程度受けているかを確認できます 一般に 自己相関が早く減衰するほど 定常分布への収束は早いです これも プロットして確認します 縦軸に自己相関の値 横軸にラグをとります また 一度にプロットできるのは変数分だけという制約があります 以下は 例後ほど登場で用いた自己相関関数です なお サンプル間の相関を現象させるために 適当に間引くこともあります コードの実行結果 の方法は 複数の連鎖を計算する必要があり 計算コストがかかります かといって一本当たりの連鎖を短くすると サンプラーのような収束の遅いアルゴリズムでは十分なサンプルが得られない危険性があります ここでは 連鎖本で計算できる の方法を紹介します の診断方法 サンプル列に対して 次のように定める 次に 次の統計量を計算する ここで はそれぞれ とのスペクトル密度推定値である を標準正規分布の点とするとき ならば サンプル列は収束していると判断する 定理からわかるように スペクトル計算を伴います スペクトル計算にはいくつか選択肢があります 個人的には 法を使っています 手順を解説します まず により得られた系列を モデルでモデル化します モデルは 次のようなモデルです 定義 次式を満たす時系列を次のモデルという 係数を係数という ノイズは互いに無相関で 過去の時系列データと独立とする 次数を予め決めておく必要があります を用いたモデル選択もできます 個人的には次数をに設定しています このモデルに従う限り サンプル系列のスペクトルは以下のように表されます 定理 上記モデルのスペクトル密度は次のように表される モデルに従うと仮定はしたものの 肝心の係数とノイズ分散は未知です そこで係数とノイズ分散を求めます 求め方のつが 法です 法 上記次のモデルの係数の推定値は 次式を解くことで得られる また ノイズ分散推定値は次式で求められる この連立一次方程式を解くことで 係数 およびノイズ分散を求めることができます これらの値が分かれば スペクトルを算出できます 特に周波数のときの値が知りたいので 次のような代入計算を行います これでの診断方法が使えます まとめると 「サンプル系列がモデルに従うと仮定する」→「標本分散共分散行列を求める」→「 法により 係数およびノイズ分散の推定値を求める」→「スペクトル密度の推定値を求める」→「の方法の通りに計算する」 微分方程式の数値解法 法で用いた 法に関して補足しておきます 法はなぜ必要なのでしょうか 法は微分方程式の数値解法の種です まずは解法を整理しておきましょう 次の階自励系微分方程式を考えます このような微分方程式の数値解法として有名なものをつほど導入します 以下 を離散化の幅 とし をの近似値とします つ目は 陽的法です スキーム 陽的法 つ目は段次 法です スキーム 段次 法 ただし とする 微分方程式の数値解法の適用範囲を広げるため 階数をつあげます つまり 階の微分方程式も考えることにします ここで 次のような変数を導入します このとき 上の階常微分方程式は以下のように書けます 　 このように 階の微分方程式であっても 階に帰着します したがって 先ほどの数値解法 陽的法 段次 法も適用できます さらにつほど数値解法を導入します つ目の数値解法が 法です スキーム 法 つ目の数値解法が 法 法です スキーム 法 法 数値解法をつほど導入したところで これらを比較します 例題として 問題を考えます 問題 次の微分方程式系を考える この系の解の様子をそれぞれの解法について プロットして確かめる さらに この系は系である そこで の値の変化も確かめる 問題も階の系に帰着します 次のようにおきます よって 次のように書けます 以上より と書けます 上式に様々な解法を適用します また は で与えられます 下図は ステップ数 で ステップ幅 とした場合の軌道のアニメーションです ただし 表示しているのは最初のステップ分です 初期値は 以下のように設定しました 水色は陽的法 橙色は段次 法 緑色は 法 紫色は 法 法です 法の軌道はかなり外れています その他の解法は一定の軌道を描いています コードの実行結果 の誤差変化も調べます 長時間軌道計算すると 法の誤差は大きくなります 一方 法と 法 法は誤差が一定です 特に 長時間計算した際に 顕著な差が現れます これらの解法は エネルギー保存という系の性質を保っていますエネルギー保存性 この性質のおかげで では（微分方程式内の仮想的な時間で）長時間計算しても 棄却率を低く保つことに成功しています を非常に小さくできる したがって 内の 法の終端時間を大きめに設定しておけば 棄却率を低く保ちながら遠くに移動することができます これらの理論的結果に関しては が詳しいです コードの実行結果 の実装 例 簡易的な 法の実験 つ目の例です ここでは以下の混合正規分布からサンプリングを行います 提案分布は以下の正規分布とします は前反復のサンプル サンプル数は で そのうち 期間として サンプルは除去します 結果は下図の通りです ヒストグラム 時系列プロット 自己相関関数共に大丈夫そうです コードの実行結果 例 サンプラーとの比較アニメーション つ目の例です ここではサンプラーとの動きを比較します 分散共分散行列が の次元正規分布からのサンプリングを行います 個のサンプルをとり サンプルは 期間として捨てます 原点を初期値として 収束診断はの方法を採用します 内の 法の終端時間は ステップ幅は とします したがって ステップ分計算しています 以下のアニメーションを見れば分かるように サンプラーでは十分にサンプルできません サンプラーは一方の変数を固定して 他方の変数を動かすため 動きが縦と横方向のみに限定されます このように 縦と横の幅が狭い分布では違いが顕著に現れます サンプラーの法は 次のような正規分布からサンプルを行います また の方は 次のようにします コードの実行結果 コードの実行結果 ソースコード インポート コード インポート 微分方程式の数値解法 コード 微分方程式の数値解法 共通のコード 終端時間 ステップ幅 ステップ数 初期値 ₀ ₀ 右辺の関数 の計算 の真値 ₀ ₀ コード 陽的法 保存用配列 初期値の保存 ₀ ₀ 陽的法のステップ 変数の初期化 反復計算 との参照 との更新 更新値の保存 の計算 コード 段次 法 保存用配列 初期値の保存 ₀ ₀ 段次法のステップ の更新 ₁ ₁ ₂ ₁ ₂ ₁ ₃ ₂ ₃ ₂ ₄ ₃ ₄ ₃ との更新 ₁₂₃₄ ₁₂₃₄ 変数の初期化 反復計算 との参照 との更新 更新値の保存 の計算 コード 法 保存用配列 初期値の保存 ₀ ₀ 法のステップ 変数の初期化 反復計算 との参照 との更新 更新値の保存 の計算 コード 法 法 保存用配列 初期値の保存 ₀ ₀ 法のステップ 変数の初期化 反復計算 との参照 との更新 更新値の保存 の計算 コード の比較 コード 軌道のアニメーション ₁ ₂ 例のコード コード 例の法 つ目の正規分布 μ₁ σ₁ μ₁ σ₁ つ目の正規分布 μ₂ σ₂ μ₂ σ₂ 混合正規分布 自己相関関数 τ 平均と分散 μ ₀ 共分散関数 τ μ τ μ ₀ 提案分布 法 サンプル保存用配列と初期値の保存 カウンター α コード 例の法の実行 初期値 サンプル数 　 自己相関の計算 τ τ ヒストグラム 時系列プロット 自己相関関数 保存 例のコード コード 例の共通のコード 相関係数 ρ 正規分布 ₁ ₂ Σ ρ ρ Σ ₁ ₂ ₁₂ 方程式を解いて 係数を求める サンプルの長さ サンプル平均　 自己共分散関数₀ ₁ ₂を求める ₀ ₁ ₂ 方程式を解く ₀ ₁ ₁ ₀ ₁₂ ノイズ分散を求める σ ₀ ₁ ₂ σ の診断方法（収束診断） サンプルの長さ の前半の平均とスペクトルを求める σ σ の後半の平均とスペクトルを求める σ σ 診断 もし収束していたらを返す コード 例のサンプラー パラメータの次元 保存用配列 初期値の保存 変数の初期化 ₁ ₂ サンプル μのサンプル ₁ ρρ₂ λのサンプル ₂ ρρ₁ 保存 ₁ ₂ 期間の除去 の診断 警告 番目のサンプルは収束していません カウンターの有無 コード 例のサンプラーの実行 　サンプル数 バーンイン期間 ₁ ₂ ₁ ₂ コード 例の法 法のステップ ϵ ∇ ϵ∇ ϵ ϵ∇ ϵ ∇ パラメータの次元 サンプル保存用配列 初期値の保存 採択された回数 正規分布からのサンプル ₀ パラメータ格納用変数 法 ₀ ϵ ∇ 採択または棄却 α ₀ コード 例の法の実行 ポテンシャル ρ ρ ∇ ρ ρ ρ ρ 　サンプル数 バーンイン期間 ϵ ステップ数 　最大ステップ数 ϵ ∇ ₁ ₂ ₁ ₂ 参考文献 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 北川源四郎 による時系列モデリング入門 岩波書店 記事一覧に戻る 
 ロジスティック写像まとめ 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 ロジスティック写像まとめ 最終更新 記事の内容 ロジスティック写像の概要 定義 解析の基本的な道具 定性的な解析 周期軌道 周期軌道 カオス的な挙動 定量的な解析 線形安定性解析 周期軌道 周期軌道 指数 ソースコード 共通のコード 定性的な解析のコード 定量的な解析のコード 今回はロジスティック写像を解析します 機会があれば エントロピー クライシスなども追加します とりあえず今回は カオス的な振る舞いや 周期的な振る舞いなど 図を描いてわかる範囲で記事にします ロジスティック写像の概要 定義 ここでは 写像という語を 普通の意味とは異なった意味で用います 定義 写像離散時間力学系 連続写像 に対して 次の差分方程式を離散時間力学系 または写像という また を軌道という それでは メインのロジスティック写像を定義しておきましょう ロジスティック方程式と同じ形をしています 定義 ロジスティック写像 ロジスティック写像を次のように定義する ただし とする 以下 次の記号を用います また のことをパラメータと呼びます 解析の基本的な道具 写像の解析に際して 次の解析ツールは基本的です 定性的な解析のための道具 時系列プロット クモの巣プロット 軌道図 定量的な解析のための道具 線形安定性解析 指数 エントロピー 時系列プロットは を次々に作用させていった値を順にプロットしたものです 直感的にも分かりやすく 規則性の発見に役立ちます クモの巣プロットは 次の順にプロットしていきます アルゴリズム クモの巣プロット から に垂直な線分を引く から まで水平線を引く から まで垂直線を引く クモの巣プロットを見れば 不動点や周期点の存在 それらの安定性などが分かります 軌道図は 横軸にパラメータ値 縦軸に十分な回数計算した軌道の値をプロットしたものです 各パラメータごとに 軌道の落ち着き先が分かります ロジスティック写像では 非常に特徴的な図になります 定性的な解析 下図は ロジスティック写像の有名な軌道図です 横軸は パラメータ 縦軸は軌道が落ち着いた先の値で 点からなる軌道の最後の個の値を表します 初期値は です 以下 初期値は全て です コードの実行結果 上の軌道図にはいくつか特徴があります 例えば 左側の 付近では 軌道がつの値に分かれています この部分では 周期で値が写り合います このような点を周期点といいます この用語をもう少し厳密に定義します 定義 周期点 写像に対して 次を満たす点をこの写像の周期点という 周期点を含む周期軌道という 周期軌道 分岐図でまず目に付く周期軌道を観察していきましょう 下図は 分岐図の周期軌道部分を取り出したものです ちょうど で二股に分かれています ちょうど であることは 解析的に示すことができます コードの実行結果 次に 時系列をプロットしておきます 早い段階で 周期軌道に落ち着きます 以下 です コードの実行結果 下図は 蜘蛛の巣プロットです 反復分計算しています 時系列プロットに対応して こちらも早い段階で周期の軌道に落ち着いています 線が何度も重なっている部分が周期軌道です コードの実行結果 下図は クモの巣プロットのアニメーションです こちらは反復分計算しています 周期の軌道に巻きついていく様子が観察できます コードの実行結果 周期軌道 次に周期軌道を計算します 下図は 軌道図の一部を切り出したものです 縦に個に分かれているので これらの値しか取らない周期軌道が存在すると考えられます コードの実行結果 時系列で見ると 確かに周期軌道です 以下 です コードの実行結果 下図は 反復計算したクモの巣プロットです 少し分かりにくいですが 黒線が重なった周期軌道が見えます コードの実行結果 下図は 反復計算したクモの巣プロットです こちらは周期軌道がはっきりと現れています 上図より反復分少ないので あと反復のうちに 一度周期性が崩れることが示唆されます コードの実行結果 カオス的な挙動 最後に 周期軌道ではなく 軌道図で黒く塗りつぶされた部分を見てみます コードの実行結果 時系列で見ると 周期性は観察されません 以下 です コードの実行結果 蜘蛛の巣プロットも複雑です 反復計算しています デタラメな値をとっているように見えます コードの実行結果 下図は反復分計算したアニメーションです コードの実行結果 定量的な解析 ここまでは主にグラフを見ながら話を進めてきました ここではもう少し式や具体的な数値を交えて話を進めていきます 線形安定性解析 線形安定性解析は 微分係数から不動点の安定性を判定する方法です まず を不動点とします 軌道の不動点からのずれをで表します すなわち 次のように定めます イメージ的には 不動点近傍の軌道を引き寄せる 吸引的な不動点を 安定な不動点といいます 逆に 不動点近傍の軌道を遠ざける 反発的な不動点を 不安定な不動点といいます したがって が減衰するならば安定 増幅するならば不安定だと判定できそうです それでは 減衰・増幅の判定方法を考えます 不動点の近傍で 次のように展開します したがって 次以上の項を無視して 次式が成り立ちます 以上より 次式が成り立ちます この式から 次のような挙動が判明します ならば である つまり 不動点は不安定である 微分係数がぴったりの場合には 非線形項の影響を加味する必要があります 周期軌道 ここでは 周期軌道がどのようにして発生するかを解析します 周期軌道は が対角線で交わるところに発生します つまり の不動点です しかし の不動点にはの不動点が含まれます の不動点を除外する必要があります 以下 の周期点を探します 手順としては 「の不動点を列挙する」 そして 「の不動点を除外する」 の段階です なお 以下としておきます その前に 周期点と周期軌道が何個存在するかを数えます まず には個の不動点が存在します また これを回作用させたには 個の不動点が存在します 一方 の不動点が個存在するので 個中個はの不動点です したがって の周期点は残りの個です この個の不動点がにより互いに写りあうので の周期軌道は個です 以上より パラメータを変化させるとどこかで周期軌道がつだけ発生します 周期点の値を解析的に求めるために 次式を解きます この方程式の解は最大で個存在します しかし 上で説明したように そのうち個はの不動点です の不動点が なので 以下の形になります 結局 の周期点を求めるには 後半の次方程式を解けば良いです の周期点は次の通りです この周期点が存在するためには が必要です 軌道図においてで軌道が二股に分かれるのはこのためです これを別の角度から眺めてみます 下図は パラメータを大きくしたときのの変化です の不動点がで生じていることが分かります この不動点の安定性はどうなっているでしょうか になると の右側の不動点における接線の傾きがより大きくなり 不安定になります 一方 を跨いで新たに生じたつの不動点は 接線の傾きから 安定です まとめると 「パラメータを大きくすると 既に存在した不動点が不安定化し その周りに安定な不動点が生じる」ことが分かります この現象を周期倍分岐といいます コードの実行結果 周期軌道 周期軌道と同じ要領で考えます まず の不動点は個存在します そのうち の不動点が個なので の周期点は残りの個です この個で互いに周期で写りあうので 周期軌道は個です 周期軌道の発生の仕方は 周期軌道の時とは少し違います 今回は不動点が突然出現します グラフが対角線に触れた次の瞬間 その両側に安定な不動点と不安定な不動点が同時に出現します このように 「パラメータを大きくすると 安定な不動点と不安定な不動点が同時に発生する」分岐をサドル・ノード分岐といいます コードの実行結果 指数 写像の複雑さを定量評価する指標を用意します をつ固定します を回施したとき 初期値からの微小のズレがどの程度増幅・減衰するかを評価します 展開により 次式が成り立ちます ここで 右辺の微分係数は 次のように表されます したがって 微小のズレの減衰・増幅率として 次の指標が意味を持ちます 定義 指数 写像の軌道に対して 指数を次式で定める 指数が正ならば 初期値の微小なズレは増幅されたと考えられます 指数が負ならば 初期値の微小なズレは減衰したと考えられます 下図では 安定な周期軌道が生じている部分では指数が負になっています コードの実行結果 ソースコード 共通のコード コード インポート コード ロジスティック写像の定義 ロジスティック写像 ≤≤ 初期値 ₀ 定性的な解析で用いたコード コード関数の定義 時系列プロット ₀ 軌道の長さ 軌道の保存 ₀ 軌道の計算 プロット 蜘蛛の巣プロット作成用 ₀ 変数の初期化と初期値の保存 ₀ を固定したロジスティック写像 縦に グラフとぶつかるまで移動 横に 対角線とぶつかるまで移動 対角線と連続版の写像プロット 縦線のプロット 更新 横線のプロット 更新 蜘蛛の巣プロット作成用 ₀ 変数の初期化と初期値の保存 ₀ を固定したロジスティック写像 縦に グラフとぶつかるまで移動 横に 対角線とぶつかるまで移動 対角線と連続版の写像プロット 縦線のプロット 更新 横線のプロット 更新 軌道図 ₀ 軌道の保存用 ₀ 回分計算 初期値の保存 追加で回計算 プロット コード 軌道図 ₀ コード 軌道図 ₀ コード 時系列プロット ₀ コード クモの巣プロット ₀ コード クモの巣プロットのアニメーション ₀ コード 軌道図 ₀ コード 時系列プロット ₀ コード クモの巣プロット ₀ コード クモの巣プロットのアニメーション ₀ コード 軌道図 ₀ コード 時系列プロット ₀ コード クモの巣プロット ₀ コード クモの巣プロットのアニメーション ₀ 定量的な解析で用いたコード コード 指数のプロット用関数 蜘蛛の巣プロット作成用 ₀ の数 指数の保存用 軌道の保存用 ₀ 回分計算 初期値の保存 追加で回計算 指数の計算 コード 周期点のアニメーション コード 周期点のアニメーション コード 指数のプロット ₀ 参考文献 田中久陽 中尾裕也 千葉逸人 ストロガッツ 非線形ダイナミクスとカオス 丸善出版 小室 元政 基礎からの力学系―分岐解析からカオス的遍歴へ サイエンス社 記事一覧に戻る 
 プロセスとジョブまとめ 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 プロセスとジョブまとめ 最終更新 記事の内容 ジョブとプロセス 基礎知識 プロセスの管理 一覧表示 プロセスの停止 ジョブの管理 一覧表示 フォアグラウンドとバックグラウンド ジョブの停止 プロセスとジョブについてまとめました 動作環境は シェルです プロセスとジョブ 基礎知識 プロセスとは が動作中のプログラムを管理する際に用いる基本単位です 一方 ジョブとは シェルが実行中のプログラムを管理する際に用いる基本単位で つのコマンドに相当します ジョブは複数のプロセスであり 単位としてはジョブの方が大きいです プロセスの管理 一覧表示 プロセスを一覧表示する方法はいくつかあります 最もシンプルなのは コマンドをそのまま使う方法です コマンド コマンド 実行結果 はプロセスです このでプロセスを識別します は端末を表します 今回の実行例では のターミナルをつだけ開いているので も種類のみです の後にキーワードを渡すことで さらに詳しい情報が得られます 以下は入力例です 出力は省略します プロセスの状態などが把握できます コマンドの実行例 プロセスの停止 プロセスを強制的に終了させたい時は コマンドを用います コマンドを用いると プロセスの状態を変化させることができます プロセスに「シグナル」を送ることで 状態を変化させます 利用可能なシグナルの一覧は で表示できます 今回はデフォルトのシグナルを用います デフォルトなので 明示的に指定する必要はありません まずは プロセスを追加します プロセスの例として コマンドを用います を用いています これはバックグラウンドで実行するためのものです 後ほど解説します プロセスの追加と確認 プロセスを追加したので 確認しましょう プロセスの追加と確認 実行結果 プロセスがのプロセスが追加されました これを強制的に終了させます コマンドにプロセスを渡します コマンドの実行 コマンドの実行 実行結果 終了できたか確認します 再度プロセスを確認 再度プロセスを確認 実行結果 追加した分のプロセスが消えています 終了に成功しました コマンドは プロセスを受け取ってプロセスを終了します を用いると プロセスの名前を用いることができます 例えば 先ほどのコマンドによるプロセスが複数あるとします プロセスの追加と確認 プロセスの追加と確認 実行結果 でプロセスを終了します コマンドの実行 コマンドの実行 実行結果 終了できたか確認します 再度プロセスを確認 再度プロセスを確認 実行結果 つとも終了できました 同じことは コマンドにプロセスを二つ渡すことで実現できます 次のコードでもできます 別の方法 ジョブの管理 一覧表示 ジョブを一覧表示するには コマンドを使います コマンド コマンド 実行結果 何も実行していないので 何も表示されません 適当にジョブを追加します ジョブを追加した状態でコマンドを実行します コマンド コマンド 実行結果 一番左の番号はジョブ番号です 各ジョブはこの番号で識別されます その右の番号はプロセスです の列は との種類の文字列が表示されます の場合は実行中 の場合は実行一時停止中です 上の例では どちらのジョブも実行中です フォアグラウンドとバックグラウンド ジョブは フォアグラウンド またはバックグラウンドで実行されます また 実行停止状態も入れると ジョブには全部でつの状態があります この節では つの状態内でジョブを変化させます 主に 次のコマンドが用いられます フォアグラウンドからバックグラウンドへは コマンドの最後にをつけて実行する フォアグラウンドから停止状態へは を押下する 停止状態からフォアグラウンドへは コマンドを用いる 停止状態からバックグラウンドへは コマンドを用いる バックグラウンドからフォアグラウンドへは を用いる は 以前用いました のような形で用いました これは バックグラウンドで実行するためのコードでした ここでは 他の状態遷移を例で見てみましょう まず を実行して で中断します これで停止状態に移行します フォアグラウンドから停止状態へ 表示されたらを押下 フォアグラウンドから停止状態へ 実行結果 次に コマンドを用います コマンドに ジョブをジョブ番号の形で指定します これでコマンドがバックグラウンドで実行されます 停止状態からバックグラウンドへ 停止状態からバックグラウンドへ 実行結果 次に コマンドを用います コマンドに ジョブをジョブ番号の形で指定します これでコマンドがフォアグラウンドで実行されます バックグラウンドからフォアグラウンドへ バックグラウンドからフォアグラウンドへ 実行結果 再び フォアグラウンドから停止状態に移行します フォアグラウンドから停止状態へ 表示されたらを押下 フォアグラウンドから停止状態へ 実行結果 今度は逆に 停止状態でコマンドを用います これでフォアグラウンドへ戻ります 停止状態からフォアグラウンドへ 停止状態からフォアグラウンドへ 実行結果 ジョブの停止 ジョブを強制的に終了させたい時にも コマンドを用います 基本的な使い方は先ほどと同様です コマンドにジョブ番号をジョブ番号の形で渡します まずは ジョブを追加します ジョブの追加と確認 ジョブの追加と確認 実行結果 ジョブ番号のジョブが追加されました これを強制的に終了させます コマンドにジョブ番号を渡します コマンドの実行 コマンドの実行 実行結果 終了できたか確認します 再度ジョブを確認 再度ジョブを確認 実行結果 追加した分のジョブが消えています 終了に成功しました 参考文献 林晴彦 新入門 西村めぐみ 新版対応 コマンド入門 技術評論社 中島能和 教科書レベル 対応 翔泳社 記事一覧に戻る 
 コマンド 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 コマンド 最終更新 記事の内容 コマンドの使い方 使い方 文字列 使い方 正規表現 複数ファイル検索 と を使う を使う コマンドについて簡単にまとめました 動作環境は シェルです コマンドの使い方 コマンドの基本的な使い方は以下の通りです の基本 検索パターン ファイル名 このコマンドを実行すると ファイル中から 特定のパターンを含む行を検索します 例を挙げます 説明には 次のファイルを用います を実行して作成します ファイル作成 を実行して書き込む ř 使い方 文字列 まずは 検索パターンが文字列の場合です 次のコマンドにより ファイル中の文字列を含む行を検索できます 文字列検索 文字列検索 実行結果 次のコマンドにより ファイル中の「文字列を含む単語」を含む行を検索できます このように 文字列は単語よりも小さい単位を指します 文字列検索 文字列検索 実行結果 次のコマンドにより ファイル中の文字列を含む行を検索できます 結果は複数行です 文字列検索 文字列検索 実行結果 使い方 正規表現 次に 検索パターンが正規表現で表される場合です この場合 基本的には 検索パターンをクオーテーションで囲みます 次のコマンドにより ファイル中ので始まる行を検索できます （カレット）は行の先頭を表します 行の末尾はです 正規表現検索 正規表現検索 実行結果 次のコマンドにより 数字桁の形の文字列を含む行を検索できます はからの範囲の桁の数字を指します 正規表現検索 正規表現検索 実行結果 複数ファイル検索 次に 検索対象のファイルが複数存在する場合です 以下のように書きます 複数ファイル検索 もうつ検索対象のファイルを作成しておきます ファイル作成 次のコマンドにより ファイルと中の文字列またはを含む行を検索できます 複数ファイル検索 複数ファイル検索 実行結果 一方 つのファイル中のつのパターン検索は無理です 複数パターンの検索に関しては 後ほど説明します 複数パターン検索 複数パターン検索 実行結果うまくいかない つ目の検索パターンがファイル名として認識されています と やを使うと 検索の幅が広がります 特に 複数のパターンを検索できます を使う まずは です 高速で 複数の文字列検索ができます 検索パターンを次のようにファイルに保存します ファイル作成 次のコマンドにより ファイル中の文字列またはを含む行を検索できます 検索パターンのファイルを渡す時は が必要です を使う を使う 実行結果 を使う 次に です 複数の正規表現検索ができます 検索パターンを次のようにファイルに保存します ファイル作成 次のコマンドにより ファイル中の「列目が○○○○」の形の文字列または 数字桁の形の文字列を含む行を検索できます 検索パターンのファイルを渡す時は が必要です を使う を使う 実行結果 ř 参考文献 ジョン・マスター ピーター・バーンズ コマンド活用ハンドブック パーソナルメディア 記事一覧に戻る 
 を使おう 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 を使おう 最終更新 記事の内容 の概要 いつ使うのか 基礎概念の定義 使い方 次元の例 正規分布の例 分布の例 混合正規分布の例 次元の例 真の分布とモデル による学習 推定 モデル選択 注意点 モデル選択の失敗 逆相関の観察 コード 共通のコード 正規分布の例 分布の例 次元混合正規分布の例 次元混合正規分布の例 逆相関の例 コードと本文で記号が少し違います 許してください の概要 いつ使うのか データ解析では データ解析者がモデルを設定します 一度に複数のモデルを考えることもできます これらのうち どのモデルが最も良いモデルなのか それを判定する指標のつがです もう少し数学的に背景を述べます 基礎概念の定義 いま 手元にデータの組 があるとします このデータたちは ある分布に独立に従う確率変数 の実現値と考えます この分布を真の分布と呼びます 統計学や機械学習は この真の分布を知りたいというモチベーションがあります 一般に真の分布は未知です そこで モデルを用意して真の分布を推測するという方針を採ります つまり 真の分布に対して データを解析する人間は確率モデル を用意します ここで はモデルのパラメータです また 統計ではパラメータの事前分布を用意します 確率モデルと事前分布が用意できれば パラメータの事後分布 が計算できます 真の分布に近い分布を作る方法はいくつかあります 例えば を最尤推定値とするとき は真の分布に近くなると期待できます これを最尤推測といいます また を事後分布の平均とするとき は真の分布に近くなると期待できます これを平均プラグイン推測といいます 一方 推測では 次の予測分布を用います 予測分布はモデルを事後分布で重みづけた平均です 事後分布の情報をフルに活用しているので 真の分布に近いと期待できます 定義 予測分布 データ 確率モデル 事前分布に対して 予測分布を次式で定義する 当然 予測分布はデータに依存します こうして構成された予測分布は真の分布にどれほど近いでしょうか 分布間の近さを測る指標が必要です この役割を ダイバージェンスが担います 定義 ダイバージェンス つの確率密度関数 に対して に関するの ダイバージェンスを次式で定める 真の分布と予測分布の近さは で測ります 値が小さいほど予測分布は真の分布に近いと考えます ここで であり 第項は真の分布にのみ依存します 第項はモデルと真の分布に依存します 真の分布に関するモデルの ダイバージェンス によりモデルを比較する上では 第項のみを比較すれば良い訳です そこで第項のみを汎化損失と定義します 定義 汎化損失 真の分布と予測分布に対して 汎化損失を次式で定める こうして 汎化損失を用いてモデル比較ができるようになりました ダイバージェンス が小さい方が 予測分布は真の分布に近く 汎化損失の小さい方が ダイバージェンスは小さいです したがって 汎化損失の小さいモデルほど良いモデルであると期待できます しかし 汎化損失の計算には真の分布が必要です そこで 真の分布を知らなくても計算できる汎化損失の推定値があると便利です 情報量規準を用いると 汎化損失を推測することができます そして は真の分布を知らなくても計算できます 定義 確率モデル 事前分布に対して を次式で定義する ただし 期待値は事後分布に関する期待値である は汎化損失と平均的に一致します 定理 と汎化損失の関係 と汎化損失の間に次の関係式が成り立つ ただし 期待値は真の分布に関する期待値である また のスモールオーダー表記は確率収束に関するものである なお 情報量基準としては が有名です しかし が使えるのはうまくパラメータ値を調節すればモデルによって真の分布を当てることができる（モデルにより真の分布が実現可能である）場合で かつ事後分布が正規分布で近似できる場合です が使える状況では はに 漸近的に一致します は次式で定義されます 定義 確率モデル に対して を次式で定義する ここで は最尤推定量である 使い方 いくつかモデルがあるとき 汎化損失の小さいモデルが良いモデルです少なくとも期待はできます そして はデータの出方に対して平均的には汎化損失と一致します したがって の小さいモデルの方が良いモデルであると期待できます そして は真の分布を知らなくても計算できます 次のように使います まずデータ解析者が複数のモデルを用意します これらのうち どのモデルが良いか分からないとします それぞれのモデルに対して が計算できます そして の値が最も小さいモデルを最良のモデルとして選択します もしくは がほとんど変化しなくなったとき 最も単純なモデルを選びます なお を解析的に計算するのは難しいので 期待値計算にはを用いることが多いです すなわち のサンプルを として 次のように計算できます 要するに標本平均と標本不偏分散から計算できます 次元の例 以下に続くつの小節で 推定を行います ここでの目的は 次の通りです 少なくとも正規分布など 綺麗な場合には がや汎化損失とほぼ同じ値になることを確かめる それぞれの小節で 真の分布 確率モデル 事前分布は以下の通りとします もちろん現実では真の分布は未知です ここでは真の分布を設定した仮想的な状況を考えます 確率モデルと事前分布は全て共通で データの発生源である真の分布だけを変えて モデルの評価を行います なお次元の例では モデル選択は扱いません 真の分布 確率モデル 事前分布 μ μ μ モデルは全て共通なので 事後分布や予測分布も全て共通です 逆に言うと 真の分布が何であろうと モデルと事前分布とデータだけで推定は可能であり だからこそモデルの評価が必要であるとも言えます ここでは導出しませんが パラメータμの事後分布と予測分布は以下の通りです はデータのサイズです μの事後分布 予測分布 以下の各小節では 真の分布の推測方法として 予測分布の計算と 最尤推測を用います また モデルの評価指標として とを用います 今回の人工的な実験では真の分布も分かっているので 汎化損失も計算します 当然 現実では真の分布も汎化損失も未知です また 最尤推測を行う場合 μの最尤推定値は以下の標本平均です 正規分布の例 まずは正規分布です うまくパラメータμを調節すれば モデルによって真の分布を当てることができます つまり実現可能です 事後分布も正規分布なので 最尤推測や的には最高の条件です 実験では 真の分布である正規分布からデータを個ほど発生させ 上述の事後分布や予測分布を計算しました 左下図では データのヒストグラム 真の分布赤実線 予測分布青実線 最尤推測緑点線をプロットしました 右下図では 事前分布水色実線 事後分布橙色実線 最尤推定値緑色点線をプロットしました 予測分布も最尤推測も 真の分布とほぼ一致しています コードの実行結果 今回のケースではは手計算で求めました 計算ミスがなければ次式になるはずですちょっと不安 汎化損失も手計算があっていれば以下の通りです 汎化損失と各種情報量規準の値は以下の通りです ちょっと不安な値です どこかで計算間違いとかあるかも 汎化損失 分布の例 次に 正規分布に似ていると言われる分布です今思えば 精度を学習させるタスクの方が面白かったかも どなたかやってみてください 確率モデル 事前分布は先ほどと同様 真の分布のみが変わっています データサイズやグラフの見方も同様 真の分布赤の実線からは結構ずれていますね コードの実行結果 しかし現実には このずれさえも認識できないのがちょっと怖いところ 右の推定結果だけを眺めるとうまくいってそうに見えます そこでモデル評価 以下に 汎化損失と各種情報量規準の値を示します 汎化損失とに関しては モンテカルロ法で積分を近似計算しています 汎化損失 混合正規分布の例 最後に混合正規分布ですこれも精度の学習の方が良かったかも 確率モデル 事前分布 データサイズ グラフの見方は今までと同様です やはり今回も 真の分布と推測結果にそれなりにずれがあります コードの実行結果 汎化損失と各種情報量規準の値を以下に示します 汎化損失とに関しては モンテカルロ法で積分を近似計算しています 汎化損失 次元の例 真の分布とモデル この節では 次元の混合正規分布を用いて推定・モデル評価します ここでの目的を端的に言えば 混合数の混合正規分布を 混合数の混合正規分布で推定したときの 推定の様子とモデル評価について調べることです まずは真の分布を以下に示します ここで で 真の分布をヒートマップで示しておきます また この分布からデータを生成しておきます このデータはこの後の推測で利用します データサイズはです コードの実行結果 この真の分布をデータから推測するために データ解析者がモデルとして混合数の混合正規分布を採用したとします すなわち 混合数に対して 次のモデルを仮定します ここで です は潜在変数で 要素がつだけで それ以外全ての次元ベクトルです 事前分布として 次を仮定します による学習 推定にあたって サンプラーによって事後分布を計算することにします サンプラーで用いる条件付き分布は以下の通りです 事後分布からのサンプルは今後 様々な場面で使います おまけ程度に サンプラーの学習の様子をアニメーションでどうぞ コードの実行結果 推定 それでは モデルを用いて真の分布を推測しましょう 冒頭で述べたように 推測方法には様々あります つの例として 平均プラグイン推測を試します これは パラメータの事後平均をパラメータの推定値として モデル式に放り込む方法です 今回のケースでは サンプラーから計算した標本平均を モデル式のパラメータの部分に代入します 平均プラグイン推測により推測した分布が以下の図です コードの実行結果 真の分布の混合数はですが 右側つはくっついています 平均プラグイン推測は事後分布のうち 平均の情報しか利用していません やはり 事後分布全体の情報を利用した予測分布の方が より良いと期待できます 下図は によるサンプルを用いて計算した予測分布です コードの実行結果 つの部分に分かれており 真の分布に似ています それではこの推測はどれくらい良いのでしょうかいよいよモデル評価です モデル評価・選択 上の推測結果を評価します この小節では 本来は未知の汎化損失と その推定値としてのを計算します そして 以下の点を調査・確認します とは大体同じくらいの値になっているか」 選択したモデル混合数の混合正規分布は適切だったか 汎化性能の観点から より良いモデルは何か 今回のような人工的な実験では 真の分布が分かっているので汎化損失が計算できます もちろん現実のデータ解析では計算できません ただし 手計算は難しいので モンテカルロ法で積分を近似しています 真の分布から発生させた人工データから計算した汎化損失とは以下の通りです 四捨五入して表示しています のモデルは 先ほどとは値が結構違います 汎化損失 汎化損失の推定はうまくいっているようです 他のモデルと比較します ここで比較するのは 混合数が異なる混合正規分布たちです 混合数を様々変えたときの汎化損失との値です 四捨五入して表示しています 混合数 汎化損失 各列で 最小の値をとる部分に色を着けています この例では 各モデル間の値の差よりも 積分の近似の誤差の方が多いような気がします それでも一応形式的には の混合モデルが選択できます 注意点 モデル選択の失敗 逆相関の観察 予測分布やはデータの出方に依存します 特に のデータの出方に対する揺らぎに関しては次のような関係式が成り立ちます 定理 と逆相関 について次の関係式が成り立つ ただし は定数で 次のように定める データサイズ一定の場合 右辺は定数とみなせます したがって 左辺の は一方が増えれば一方が減ります つまり負の相関があります 特にモデルに依存する部分のみを取り出すと 汎化損失とは一方が増えれば一方が減ります これはモデル選択の観点からは不都合です 手元にあるデータから計算したが偶然小さかったとしても 実際には汎化損失が大きいということもあります あくまでも平均的に一致するだけです この逆相関を観察します 下図は 真の分布からデータを回ほど発生させ 各データから計算した汎化損失との値の変化をプロットしました このつの系列の相関係数は です 図からも 一方が増えれば一方が減る傾向が見て取れます コードの実行結果 コード 共通のコード コード インポート 正規分布の例 コード 正規分布の例 真の分布 未知 λ 既知 λ 確率モデル λ μ μ λ μ μ λ 最尤推定 μ 事前分布 μ₀ 既知 λ₀ 既知 φμ μ₀ λ₀ μ 事後分布 μ₀ λ₀μ₀λλ₀λ λ₀ λ₀λ μ μ₀ λ₀ μ 予測分布 μ μ₀ λ λλ₀λλ₀λ μ λ 汎化損失 λπλλλ μ μ λλ₀λ λπλλ₀λλ μ λ データ空間のプロット μ パラメータ空間 μ φ μ μ μ μ μ 推定結果を表示 汎化損失 μ 保存 分布の例 コード 分布の例 真の分布 ν ν 確率モデル λ μ μ λ μ μ λ 最尤推定 μ 事前分布 μ₀ 既知 λ₀ 既知 φμ μ₀ λ₀ μ 事後分布 μ₀ λ₀μ₀λλ₀λ λ₀ λ₀λ μ μ₀ λ₀ μ 予測分布 μ μ₀ λ λλ₀λλ₀λ μ λ 汎化損失サンプリング サンプルのサンプル数 ν μ λλ₀λ λπλλ₀λλ μ ν データ空間のプロット μ パラメータ空間 μ φ μ μ μ μ μ 推定結果を表示 汎化損失 μ 保存 次元混合正規分布の例 コード 次元正規分布の例 真の分布 μ₁ μ₂ σ₁ σ₂ π₁ π₂ μ₁ σ₁ μ₂ σ₂ π₁ π₂ 確率モデル λ μ μ λ μ μ λ 最尤推定 μ 事前分布 μ₀ 既知 λ₀ 既知 φμ μ₀ λ₀ μ 事後分布 μ₀ λ₀μ₀λλ₀λ λ₀ λ₀λ μ μ₀ λ₀ μ 予測分布 μ μ₀ λ λλ₀λλ₀λ μ λ 汎化損失サンプリング サンプルのサンプル数 μ₁ σ₁ μ₂ σ₂ π₁ π₂ μ λλ₀λ λπλλ₀λλ μ μ₁ σ₁ μ₂ σ₂ π₁ π₂ データ空間のプロット μ パラメータ空間 μ φ μ μ μ μ μ 推定結果を表示 汎化損失 μ 保存 次元混合正規分布の例 コード 関数の定義 のサンプル クラスタ数 番目のデータ点に対応する潜在変数 コード 真の分布 パラメータの真値 μ λ π 真の分布の作成 μ λ π 真の分布をプロット データの生成 ハイパーパラメータ α コード 平均プラグイン推測 平均プラグイン推測 α α コード 予測分布 予測分布 α α コード 汎化損失との計算 汎化損失の計算 α α コード モデル選択 モデル選択 α α α コード サンプラーによる学習の様子 による学習 α α μ μ λ λ π π π プロット用 μ λ π 逆相関の例 コード 逆相関 ハイパーパラメータ α データサイズ エントロピーの計算 複数回データを発生させる データを生成 を計算する α を計算する α 相関係数 参考文献 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 記事一覧に戻る 
 写像 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 写像 最終更新 記事の内容 写像の基本 定義 軌道 分岐 パラメータの分岐図 パラメータの分岐図 今回は 写像で図を描いて遊びます 時間ができたら 不動点とか分岐の理論的な部分もやりたいな 写像の基本 定義 今回の主役は 写像です 写像は次元の離散力学系で 定義は以下の通りです 定義 写像 に対して 写像 を次式で定める 式を見てもよく分からないので 図を描いてみます とはしばしば それぞれ と として選択されます 軌道 適当な初期値から始めて その後の時間発展を追います つまり軌道をプロットします 下図は 原点を初期値とし とした場合の軌道です コードの実行結果 放物線のようにぐにゃっと曲がっています 写像は次のように分解することができます ここで です 引数のベクトルは まず軸方向に放物線になるよう曲げられますによる変形 次に 軸方向に倍に圧縮されますによる変形 最後に に関して対称に写されますによる変形 分岐 分岐の様子を観察します パラメータがつあるので 少し工夫が必要です パラメータの分岐図 まず 一方のパラメータを固定して 他方のパラメータに関する分岐を調べます 最初に を に固定して だけを変化させます 分岐図の描き方はロジスティック写像の時と同じです まず 候補となるパラメータ値を一つ固定し 初期値を原点とします 写像を回ほど作用させ 軌道がある程度落ち着くまで計算します 次に その軌道の最後の値から出発して 追加で回分計算します その個の値を 予め固定したに対して縦軸方向にプロットします 下図はこうして得られた図です 各に対して 縦方向に個分の点が描かれています コードの実行結果 ロジスティック写像の分岐図に似ています 周期倍分岐が起きている様子も観察できます 次に を に固定して だけを変化させます 描き方は先ほどと同様です コードの実行結果 こちらも ロジスティック写像の分岐図に大変似ています パラメータの分岐図 前節では パラメータのうち一方を固定し 他方を変化させていました 今度は どちらの値も変化させます ここでは 文献 の方法に従って 周期軌道を表現します まず パラメータ値 を固定します そして 初期値を原点とします 写像を回ほど作用させ 軌道がある程度落ち着くまで計算します 次に その軌道の最後の値（以下 最後の点）から出発して 写像を最大回ほど作用させ 軌道の周期性を判定します ただし 写像を回作用させるごとに判定します 写像を回作用させた予測値と 最後の点との距離をとします が十分小さい値より小さければ 最後の点と同じ点を通過したとみなし 周期点と判定します そのときの反復回数を周期とします が十分大きい値より大きければ発散したとみなし 計算はストップします 周期性はないと判定します どちらでもなければ 計算を続けます こうして 最大周期までを発見することができます このようにして周期を判定して描いた分岐図が下図です としました 色が薄いところほど周期は小さいく 色が濃くなるほど周期は大きくなります 黒い部分は発散しています コードの実行結果 コード インポートと関数の定義 コード インポート コード 関数の定義 写像 写像の軌道 ₀ ₀ ₀ ₀ 周期を計算する ϵ 周期 新たな点 回計算する 写像で写す 最後の点との距離 発散する場合 近傍を通る場合 軌道 コード 軌道の計算 ₀ ₀ ₀ ₀ 写像の軌道をプロット 分岐図 コード パラメータの分岐図 初期値 ₀ ₀ 反復回数 の候補 候補数 保存用 軌道の落ち着き先の計算し プロット ₀ ₀ コード パラメータの分岐図 初期値 ₀ ₀ 反復回数 の候補 候補数 保存用 軌道の落ち着き先の計算し プロット ₀ ₀ コード パラメータの分岐図 ϵ は固定する ϵ の候補 の候補 との保存用 周期の保存用 とを変化させて計算する 初期化 初期値から初めて軌道を計算する 周期を計算する 　 ϵ 参考文献 田中久陽 中尾裕也 千葉逸人 ストロガッツ 非線形ダイナミクスとカオス 丸善出版 小室 元政 基礎からの力学系―分岐解析からカオス的遍歴へ サイエンス社 記事一覧に戻る 
 の猫写像 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 の猫写像 最終更新 記事の内容 の猫写像 定義 画像で遊ぶ 周期点 周期点の確認 コード インポートと関数の定義 その他のコード 今回はの猫写像で遊びます ネコのイラストが雑でイマイチ感情移入できないかもしれませんが 画像さえあれば計算できるのでぜひ試してみてください 周期点の証明もそのうち の猫写像 定義 の猫写像は次式で定義されます 定義式の は 実数の小数部分を表します 定義 の猫写像 の猫写像 を次式で定める 小数部分が返されるので に写されます 画像で遊ぶ 以下の猫のイラストを用います 猫のイラストが雑でごめんなさい 是非お好きな画像で試してみてください コードの実行結果 まず 猫写像の の部分を無視して写します 単純に各点のインデックスを行列で写すだけです すると 次のように画像が引き延ばされます コードの実行結果 さらに で に写すと 次のようになります 猫が 切り裂かれました コードの実行結果 また 猫写像を何回か作用させると面白い画像になります 猫写像を回作用させると 猫が分身します コードの実行結果 また 猫写像を回作用させると 猫が生き返ります よかったね コードの実行結果 周期点 猫は生き返ったということは 何らかの周期性があるということです 周期点の確認 実は 有理数を成分とする点は猫写像の周期点です 有理数を初期値として何回も作用させると また戻ってきます 以下にアニメーションを示します コードの実行結果 コード インポートと関数の定義 コード インポート コード 関数の定義 画像を上下反転 画像ファイルを読み込む の猫写像 の猫写像 の猫写像 再配置 画像のサイズ 新たな画像 画像の点の再配置 その他のコード コード 画像の表示 画像の読み込み 元の画像 ＃ コード 画像の引き延ばし 画像のサイズ 新たな画像 画像の点の再配置 ＃ コード の猫写像の像 の猫写像 ＃ コード 猫の分身 の猫写像 繰り返し写す コード 猫の復元 の猫写像 繰り返し写す コード 周期点 反復回数と保存用配列 初期値 アニメーション 記事一覧に戻る 
 と 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 と 最終更新 記事の内容 を使う 基本的な使い方 正規表現を使う コマンドファイルを使う フラグを使う を使う 基本的な使い方 レコードとフィールド 正規表現を使う コマンドファイルを使う 算術演算・変数・関数 との利用 連想配列の利用 とについて簡単にまとめました 動作環境は シェルです セドとかセドゥと読むとは テキスト編集に特化したエディタのことです を使うと 大量のテキストデータであっても高速に編集することができます に由来 オークと読むとは データ操作に特化したプログラミング言語です を使うと データに対して何らかの操作演算などを行うことができます とは次のような共通点を持ちます データを行ずつ読み込む 編集作業は行に対して全て行ってから 次の行に移る ストリーム指向 編集作業は全ての行に対して行うが アドレスにより編集を適用する行を指定できる 正規表現を利用できる 編集内容はコマンドファイルで指定できる 編集結果は標準出力に書き出す 編集しても 入力ファイルは変化なし 結果が出力されるのみ を使う まずはからです 次のファイルを使います ファイル作成 ř 基本的な使い方 の基本的な使い方は以下の通りです は空白を表します の基本 アドレスコマンドフラグファイル名 アドレスには 編集したい行の番号を指定します コマンドには 編集内容を指定します 例えば 置換 削除 追加 表示などが適用でき アルファベット文字で指定できます フラグには つの行内の編集内容の適用範囲を指定します ファイル名には 編集したいファイルを指定します 最低限 コマンドが必要です 例を挙げます を編集します コマンドは置換コマンドです ある特定の文字列を別の文字列で置換できます 置換前置換後のように記述します 次のコマンドにより ファイル中の文字列を全て で置換します 置換コマンドの利用 置換コマンドの利用 実行結果変化した部分を赤く表示 ř 特に指定がなければ 置換は全ての行に対して適用されます 特定の行にのみ置換を適用したいならば 行番号または文字パターンを指定します まず 行番号を指定する方法です 行目から行目まで 置換を適用します 置換コマンドの利用 置換コマンドの利用 実行結果変化した部分を赤く表示 ř 行だけを指定することもできます 下のコマンドにより 置換は行目にだけ適用され 行目には適用されません 置換コマンドの利用 置換コマンドの利用 実行結果変化した部分を赤く表示 ř 次に 文字パターンを指定する方法です 次のように入力すると 文字列を含む行にのみ 置換が適用されます 置換コマンドの利用 置換コマンドの利用 実行結果変化した部分を赤く表示 ř ここまでは 置換コマンドのみを使ってきました 他のコマンドも使ってみます コマンドは削除です 行をまるごと削除します 以下のコマンドにより 行目の空行を削除します 削除コマンドの利用 削除コマンドの利用 実行結果 ř 他に追加コマンドもあります 後ほど紹介します なお 一度に複数の処理も可能です オプションを使います 以下のコマンドにより 次のつの処理が実行されます 文字列を に置換する 文字列 をに置換する 空行を削除する 行目と行目では 上つの置換が実行されます これらの置換は 行読み込むごとに つの置換を両方行うのでしょうか それとも 行読み込んで置換するという作業を周分繰り返すのでしょうか は行読み込むごとに つの置換を両方行います 複数コマンドの実行 複数コマンドの実行 実行結果 ř 正規表現を使う 先ほど挙げた例で 空行の削除にわざわざ行番号を指定していました これではファイルが大きくなったとき大変です そもそも 空行の行番号の把握にも一苦労です そこで正規表現を用います 次のように書くと空行を削除できます 正規表現を利用した空行の削除 正規表現を利用した空行の削除 実行結果 ř 行の指定だけではなく 他にも使えます 以下のコマンドにより 文字列が で置換されます 正規表現を利用した置換 正規表現を利用した置換 実行結果変化した部分を赤く表示 ř コマンドファイルを使う 複数の処理や 汎用的なコマンドをファイルに保存しておくと便利です ここではコマンドファイルから編集を行います まず 次のファイルを作成します ファイル作成 コマンドファイルを利用するには オプションを使います 以下のコマンドにより 次のつの処理が実行されます 文字列を に置換する 文字列 をに置換する 空行を削除する 次のように実行します コマンドファイルの実行 コマンドファイルの実行 実行結果 ř 他の例も試してみます 次は追加・変更コマンドを利用します 追加コマンドにはとの種類があり 変更コマンドはです 次のようなファイルを作ります ファイル作成 以下のコマンドにより 次のつの処理が実行されます 行目の上に 指定された行 が挿入される 行目の下に 指定された行 が追加される 空行が指定された行 に変更される コマンドファイルの実行 コマンドファイルの実行 実行結果 ř フラグを使う 一つの行に 置換したい文字列パターンがつ以上ある場合 次のつの状況が考えられます 複数のパターンのうちつだけを置換したい 複数のパターンの全てを置換したい デフォルトでは つ目のパターンだけが置換されます 番目を置換したい場合 パターンの後にと記述します これをフラグと言います 例えば 次のように書きます フラグの指定 スモモもモモもモモのうち モモ桃 フラグの指定 実行結果 スモモもモモも桃のうち デフォルトでは 番目のパターンだけが置換されます フラグの指定 スモモもモモもモモのうち モモ桃 フラグの指定 実行結果 ス桃もモモもモモのうち 全てのパターンを置換したければ グローバルフラグを指定します フラグの指定 スモモもモモもモモのうち モモ桃 フラグの指定 実行結果 ス桃も桃も桃のうち フラグは他にも何種類か存在します を使う 次に を扱います 次のファイルを使います ファイル作成 基本的な使い方 の基本的な使い方は以下の通りです は空白を表します の基本 パターンアクションファイル名 パターンには 行を特定するためのパターンを記述します アクションには 指定した行に対する操作内容を記述します ファイル名には 操作したいファイル名を記述します パターンはデフォルトで全ての行 アクションはデフォルトでです 例を挙げます 特定の行の処理を指定 特定の行の処理を指定 実行結果 文字列を含む行を表示します を省略しても同じ結果が返ります レコードとフィールド は次のような形式のファイルを扱います １行分を示します が扱うファイル１行分 フィールド フィールド フィールド この行分をレコードと言います また レコードの成分をフィールドと言います では 組み込み変数でレコードの番号を管理します 以下のように書くと レコードの番号にアクセスできます を使う を使う 実行結果 行が更新されるたびに はつずつ繰り上がります 現在処理しているレコードが何番目か把握するのに役立ちます 各フィールドは のような変数で表します これは番号ではなく ファイルに格納されている値を保持します フィールドの個数はで取得できます フィールド演算子を使う フィールド演算子を使う 実行結果 これらの変数を用いてデータを操作する例を挙げます とを使う とを使う 実行結果 正規表現を使う と同様 は正規表現を利用できます 次のコードにより で始まるレコードを参照できます 正規表現 正規表現 実行結果 次のコードにより またはで始まるレコードを参照できます 正規表現 正規表現 実行結果 コマンドファイルを使う はと同様 コマンドファイルに保存できます 一般に コマンドファイルは次のような構造をしています コマンドファイルの構造 データを読み込む前に一度だけ実行したいコード メインの入力ループ 全てのデータを読み込んだ後で一度だけ実行したいコード とは省略可能です と同様 データは１行ずつ読み込まれ データ操作は１行ごとに全て実行されます 次のようなファイルを作成します とは省略し メイン部分だけを書きます ファイル作成 オプションを指定して実行します 全てのレコードに対して つのフィールドとの値が返されます コマンドファイルを使う コマンドファイルを使う 実行結果 算術演算・変数・関数 はプログラミング言語なので 変数に代入したり 計算したりできます 次のようなファイルを作成します ファイル作成 以外は 変数への代入です 各レコードに対してが計算され 共通の変数に加算されます 結果として表示されるのは 各商品の小計とそのときの合計金額です なお １行目はフィールド名であり 演算の対象外です 変数・演算 変数・演算 実行結果 のはや などの関数も用意されています また 関数を自分で定義することもできます 次のようなファイルを作成します ファイル作成 関数を定義し 小計の計算は関数内で行います また を用いて 最終結果のみを表示します 変数・演算 変数・演算 実行結果 との利用 では文や文が利用できます まずはを使います は次のように書きます は反復回数です で 繰り返し変数をずつ大きくします の基本的な形 例として 次のようなファイルを作成します ファイル作成 各レコードにおいて フィールドの番号をの繰り返し変数として フィールド値を表示させます の利用 の利用 実行結果 次にを利用します の基本的な形は以下の通りです の基本的な形 条件 条件が成り立つときの処理 条件 条件が成り立たない かつ条件が成り立つときの処理 いずれの条件も成り立たないときの処理 合計金額を表示させるプログラムを書きます ファイル作成 先ほどは を使って計算の対象外である番目のレコードは除外していました 文を用いても除外できます の利用 の利用 実行結果 連想配列の利用 で扱う配列は連想配列です インデックスとして文字列や数値が使えます 以下のプログラムにおいて インデックスは数値です しかし普通のプログラミング言語の配列とは異なり インデックス番号と順序は無関係です インデックスと要素をペアで記憶します 配列の要素の並びはインデックス順とは限りません ファイル作成 配列に各商品の代金を格納します 各要素を足し合わせることで 合計金額を算出します 関数で 配列の長さが取得できます 連想配列の利用 連想配列の利用 実行結果 参考文献 ジョン・マスター ピーター・バーンズ コマンド活用ハンドブック パーソナルメディア プログラミング 改訂版 オライリージャパン 記事一覧に戻る 
 コマンド 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 コマンド 最終更新 記事の内容 コマンドの基本 の基本的な形 例 コマンドについて簡単にまとめました 動作環境は シェルです また加筆するかもです コマンドの基本 コマンドは ファイル作成を人間に代わって実行してくれるコマンドです 大抵の場合 ファイルの作成方法には 手順があります その手順を記しておけば あとはが全部実行してくれます また ファイル作成の過程で使っていた数値やコマンドを変えたとしても コマンドは柔軟に対応し 全て代行します コマンドは次のように書きます コマンドの基本 これだけです ただし 予めという名前のファイルを作成する必要があります の基本的な形 またはの基本的な形は以下の通りです まず 最初の行のに注目してください このが最終的に作成したいファイルです そして を挟んで右側に の作成に必要なファイル を列挙します その下の行には からを作成する過程をコマンドで記述します そして を作成する過程が行目以降の の部分です このように 必要なファイルとそのファイルを作成するのに必要なファイルとファイル作成のためのコマンドを上から順に書いていきます 例 例を挙げます この例自体は現実には全く使えない例です言語なら役に立ちますが ここで行う作業は 単位円上の離散点をデータとして保存し データ点をつないで単位円を描くプログラムを作成することです データ点の作成にはを用います また プロットにはを用います ただし はプロットもできるので正直無駄な作業です 目的は 単位円を描いた画像ファイルを得ることです これを とします をを用いて描きます のコマンドを収めたファイル と データ点を保存したファイル が必要です 行目は次のように書きます 必要なファイルを揃えるために まず 次のファイルを作成します ファイル作成 とすれば図が描けます 次に を作る必要があります これはで作成します 次のファイルを作成します ファイル作成 これを実行して 出力を ファイルに格納します ということで を作成する行は次のように書きます また を作成するためにコマンドは です まとめると は次のように書きます ファイル作成 を書いたら 次のコマンドを実行します コマンドの実行 うまくいけば 出力として実行されたコマンドが次のように表示されます コマンドの実行 実行結果 また コマンドを実行すれば 目的の画像ファイル が作成されているはずです を用いて表示します 画像の表示 画像の表示 実行結果 ここで コードの一部を少し変えてみます コードの一部を変更しても 再実行は簡単です ファイル変更 ファイルを変更したら 次のようにコマンドを再実行します コマンドの実行 再び画像を開くと 次のような画像が得られます 画像の表示 画像の表示 実行結果 参考文献 矢吹道郎 大竹敢 使いこなす テクノプレス 改訂版 オライリー・ジャパン 記事一覧に戻る 
 階層モデルの予測分布 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 階層モデルと予測分布 最終更新 記事の内容 問題設定とモデリング 問題設定 種類の予測 解析 事後分布の計算 の導出 計算とプロット 解析 予測分布の計算 予測その 予測その コード データ等 予測分布 久しぶりの更新となりました 今回は階層モデルと予測分布に関して解説します 問題設定とモデリング 問題設定 次のような問題を考えます さんは分間に読んだ本のページ数の記録をとっています ただし 読む本は観測ごとに異なるものとします 現在 データが個ほどあり 次のような値であるとします このデータを用いて 予測を行いたいと思いましたここでいう予測の意味については 後ほど 予測を行うため 次のようなモデルを仮定しました は読んだページ数観測値とし とします 本ごとに読みやすさ・読みにくさがあることを考慮し データごとに異なるを仮定します また 次のような記号を用います ここでの目標は予測分布を計算することです 解析の前に 予測について確認しておきます 種類の予測 一般に 予測分布は次のように定義されます 定義 予測分布 をパラメータとする確率モデル に対して 予測分布を次式で定める ただし をデータとする 今回の問題設定で予測しているものは何でしょうか 次のつが考えられます 各本 に対して 新しい観測値を予測したい データには含まれない新たな本に対して 観測値を予測したい 今回はこの種類の予測のための予測分布を計算します 解析 事後分布の計算 本節では 事後分布を計算します 事後分布は により実現します の導出 まず 同時分布を考えます 観測値および パラメータ の同時分布は次のようになります したがって で用いる条件付き事後分布は以下のようになります ここで とします 共にガンマ分布です 次に この式を用いて事後分布を計算します 計算とプロット 前のセクションの結果を用いて計算した事後分布からのサンプルのヒストグラムは以下の通りです 全部でサンプルとり 最初のサンプルは初期値に依存するものとして除きました 期間 左下の図はのヒストグラムです のの関数で とすることで ステップ関数のように描きました は観測値の数だけを含み それらを重ねて描いています 右図は の事後分布です コードの実行結果 次節では 事後分布からのサンプルを用いて 予測分布を計算します 解析 予測分布の計算 予測分布を計算します 冒頭でも述べた通り 階層モデルでは 予測にもつの方向性があります 今回のケースでは 以下のつです 各本 に対して 新しい観測値を予測したい データには含まれない新たな本に対して 観測値を予測したい 今回は前者を予測その 後者を予測そのとして それぞれ計算します 予測値であることを強調してを付けていますが 以下 簡単のためは単にのように書きます 予測その まずは 予測その各本 に対して 新しい観測値を予測したいを考えます 通常 （教科書的には）予測分布と言えばこちらを指します この場合 求める予測分布は以下の通りです 積分が解析的には求まらない場合には 事後分布からのサンプルを用います ここでは 次の通りの方法で予測分布を近似計算します 以下 各の事後分布からのサンプルは既に計算してあるものとします 予測分布の定義式の積分を近似計算し 確率 を近似する 予測分布からのサンプルを乱数発生により得る どちらを用いるかは状況次第です 何が既知か 　あるいは予測分布の何を計算したいかによります 前者はモデル内での確率を計算するのに有効です 一方 後者は予測分布の平均や分散などを計算するのに有効です まずは つ目の計算方法を試します 確率 を近似します 積分は以下のように近似できます ただし は によって計算した事後分布からのサンプルです これを各 を固定するごとに 各 に対して求め プロットしたものが下図です コードの実行結果 次に 予測分布からのサンプルを生成し 予測分布を構成します これは以下のようにします まず を固定します 次に 事後分布からのサンプルから つのサンプルを固定します そして モデルにしたがって新たなサンプル を計算します 予測分布は確率モデルを事後分布で重みづけたものですから このようにして得られたサンプルは予測分布 からのサンプルと見なすことができます をヒストグラムで表示したものが下図です コードの実行結果 予測その 次に データには含まれない新たな本に対して 観測値を予測したいを考えます この場合 新たな観測値はデータのどの添え字にも対応しません 新たな観測値対応するもモデル内にはありません 元のモデルは以下の通りでした これを 次のようにデータの生成過程とみなします すなわち の情報をもとに 新たにを生成し そのをもとに観測値を生成します ただし 予測分布は事後分布で重みづけられたものですから 新たな観測値予測値は次のように生成されます は事後分布から発生させます この生成過程は次のように解釈できます まず 新たな観測値予測値に対応するをの予測分布 から生成します このの予測値を用いて 新たな観測値をモデルにしたがって から生成します の予測分布を書き下すと 以下のようになります また この式を変形すると 予測分布は次のように書けます すなわち 予測そのの予測分布はをパラメータとする確率モデル に対する予測分布とみなせます冒頭の予測分布の定義参照 それでは 予測分布を計算します ここでも主に通りの計算方法が考えられます 以下 の事後分布からのサンプルは既に計算してあるものとします 予測分布の定義式の積分を近似計算し 確率 を近似する 予測分布からのサンプルを乱数発生により得る まずはつ目の計算方法からです 確率 を次のように近似します ただし は次のように生成します ここで は事後分布からのサンプルです このようにして計算した予測分布のプロットが下図です コードの実行結果 次に 予測分布からのサンプルを計算して 予測分布を構成する方法です 次のように 生成過程に従って乱数発生させます すなわち 各 に対して 次のサンプリングを繰り返します ここで は事後分布からのサンプルです このようにして構成した予測分布からのサンプルを下図のようにヒストグラムで表示しました コードの実行結果 以上 通りの計算方法を実行しました ただし 今回のケースは ある程度解析的に処理することもできます 予測分布を以下のように近似します ここで は事後分布からのサンプルです 内部のパラメータに関する積分が解析的に実行できることもあります 他にも 数値積分で近似するなどの方法もあります このようにして近似した予測分布を下図に示します コードの実行結果 コード データ等 コード インポート コード データ データサイズ サンプル数 αとμβ α μβ 推定 λ β α μβ コード α μβ 期間 サンプルサイズ サンプル保存用 λ β λ β サンプリング λのサンプリング λ α β βのサンプリング β α μβλ λ β コード 事後分布の計算 λの事後分布 λ λ λ λ βの事後分布 β β β β まとめて表示 λ β 予測分布 コード 予測その モデル λ λ 予測分布を直接計算 λ λ λ 積分 λ 確率を計算 λ プロット コード 予測その 予測分布を構成 λ サンプル数 サンプル保存用 λ 予測分布からのサンプル λ 予測分布からのサンプル β λ コード 予測その モデル λ λ 予測分布を直接計算 α β β λ 積分 λをサンプル λ α β モデル式 λ 確率を計算 α β プロット コー 予測その 予測分布を構成 α β サンプル数 サンプル保存用 β λ 予測分布からのサンプル λをサンプル λ α β をサンプル λ 予測分布からのサンプル α β コード 予測その α β βαααβα 予測分布を計算 α β β 積分 α β 確率を計算 α β プロット 記事一覧に戻る 
 共役勾配法法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 共役勾配法法 最終更新 記事の内容 法の概要 経緯と概要 つのストーリー 法を構成する 解の特徴づけ 直交化 法を俯瞰する 部分空間 直交化 法の位置づけ 法を使ってみる 実装と数値実験 コード 今回は法をとりあげます 収束性の議論や前処理は扱いません また 細かい証明も省きます 法の概要 経緯と概要 法 共役勾配法は 連立一次方程式の数値解法で 年に と によって提案されました 多くの望ましい性質を有することから 当初から相当注目されたそうです 元々 という大規模な国家的な研究プロジェクトの中で提案されたことから 期待も大きく 世紀の大発見として持て囃されたとか 戸川隼人先生 によれば 数値計算法の一解法が これほど大々的に報道されたことは 前にも後にも例がないとのこと しかし不幸にも 当初期待されていたほどの性能が発揮できなかったことから 次第に忘れられていきます 法の提案から数年経った年ごろ頃 非線形最適化問題の数値解法として再登場 さらに年頃には 係数行列が疎の場合の収束性が注目され その重要性が再認識されます 年代後半 前処理技術も発達し 応用に向けて研究も活発に行われました そして年頃には部分空間法として再定式化され 変種のアルゴリズムの開発が加速します 今では応用でも利用される重要なアルゴリズムのつであり 世紀の最も重要なアルゴリズムのつとして知られます それでは 一体なぜ 法はそれほどまでに注目されたのでしょうか 一般に認識されている法のメリットをいくつか挙げます 法のメリット 原理的には有限回の反復で厳密回に到達する 計算量は直接法よりも少ない 行列の全成分を知らなくても 行列 ベクトル積が分かれば計算可能 例えばなどと相性が良い を回避できる 疎性を保ったまま計算できる 方が提案された際 特に注目されたのはつ目の点です 係数行列が 行列の場合 理論上は最大でも反復以内に厳密回に到達します しかし実際には丸め誤差の影響から より多くの反復を必要とします 収束しない場合もあります 連立一次方程式に対する法の具体的なアルゴリズムを以下に示します ただし 係数行列は対称行列とします 法のアルゴリズム 行列 ベクトル積が何度か登場しますが これは各反復で一度計算すれば十分です 追加の計算コストを削減できます 法で用いる行列に関する情報は この行列 ベクトル積のみです したがって 行列 ベクトル積の計算方法さえ分かれば 法は適用できます また の消去法などの直接法と異なり 計算過程で元々の要素に非ゼロ要素が混入する 現象は起こりません したがって やであればスパース行列を用いて非ゼロ要素のみを保持しておけば計算できます これは大規模でスパースな問題では特に有利です つのストーリー 次節から 上記アルゴリズムがどのように導出できるかを説明します 理解の仕方は大まかに通りあります つ目は最適化問題から出発して 適当な仮定を追加していくことでアルゴリズムを構成していく見方 つ目は 部分空間法という枠組みから 法がどのように位置付けられるかを俯瞰する見方 次節ではまず前者のストーリーを追っていきます 法の解説は 数値解析の教科書ならば大抵載っています あたりは変種も含め詳しい記述があります 特に は非対称行列に対するアルゴリズムなど 話題が豊富です 最適化問題の解法としての記述は が詳しく は関数解析をベースに空間内で議論を展開しています 法を構成する この節では 法を具体的に構成していきます よくある説明ですが 勾配降下法から出発して 途中で適当な仮定や操作を加え アルゴリズムを組み立てていく方針です 細かい証明は省きます ここでは 係数行列が正定値対称の場合を考えます 解の特徴づけ まずここで用いる記号を確認します を以上の自然数とし とします 本節法を構成するでは を正定値対称行列とします また の標準内積を で表し 次のような内積も定めます の対称性から 内積であることが分かります 次の連立一次方程式を考えます は この方程式の解とします は正定値なので正則であり 解が一意に存在します 以下 この方程式の解の近似解列を構成する方法を考えます まず 解の特徴を掴むため 次の関数を考えます の正定値性から 関数はで唯一の最小値を持ちます したがって の最小値を探すことで 連立一次方程式の解にたどり着きます そこで 初期解から始めて 次のような直線探索の更新式で近似解列を構成することにします ここで ステップ幅と探索方向ベクトルは現時点では未知です は 各においてが最小となるよう定めるのが自然です をに関する関数とみて微分し 微分係数をとおいて整理すると 次式が得られます ただし を次式で定め 残差ベクトルと呼びます あとは 探索方向を定めるだけです 最急降下法の場合 負の勾配 とします つまり 残差ベクトル方向に進めば 関数値が最も減少します ただし 最急降下法は精度があまり良くないので 違う方向に進むことにします 残差ベクトル方向は良い候補ですが ここでは修正を加えます 直交化 探索方向ベクトルは 残差ベクトル方向に少し修正を加えて構成します 探索はなるべく少ない回数で完了した方が良さそうです そこで 探索方向ベクトルは互いに次独立であるとします これは 一度探索した方向は二度探索しないための要請です さらに 直交性も課しておけば 探索の効率性も期待できます なお 直交性を仮定しておけば次独立性は保証されるので ここでは直交性のみを要請します この要請を満たすために 探索方向 を次のように構成します これが探索方向ベクトルの更新式になります これは 内積 に関する の直交化です すなわち 残差ベクトル方向に の直交化法を適用することで 探索方向ベクトルを更新できます しかし 更新式の右辺は少々複雑です 次の補題を用いると簡単な式になります 証明は や にあります 補題 自然数 自然数 に対して 次式が成り立つ 以上より 探索方向は次式のように表されます 以上の議論により 法のアルゴリズムが導出されます もう一度法のアルゴリズムを見返してみると ステップ幅の更新 直線探索による近似解の更新 探索ベクトル方向の直交化という流れになっています なお 以上のように解を更新すると 残差ベクトルは標準内積の意味で直交します 補題 自然数 に対して 次式が成り立つ したがって 最初の反復で残差ベクトルは本のベクトルからなる直交系をなします 反復目の残差ベクトルはさらにその直交系と直交します 一方 は次元なので 反復目の残差ベクトルは自動的に零ベクトルになります したがって 反復で残差はに達し 真の解にたどり着きます ちなみに関数はエネルギーの形をしており 法はエネルギーを効率よく最小化するアルゴリズムとも言えます 法を俯瞰する この節では 部分空間法という枠組み方法を俯瞰します 前節のようにアルゴリズムを組み立てていくというよりは より大きな視点から出発して いくつかの仮定をおき 法がどのような位置付けであるかを追っていく方針です 細かい証明は省きます ここでは 係数行列が対称の場合を考えます 部分空間 本節で用いる記号は前節と同じです ただし 本節法を俯瞰するでは 行列は対称行列とし 必ずしも正定値とは限りません 冒頭から部分空間という名前だけは出していますが 未定義でした まずは以下に定義を述べます 定義 部分空間 非ゼロベクトル 行列 自然数 に対して が次独立のとき を行列とベクトルに関する次の部分空間という 部分空間を用いた枠組みは 部分空間法と呼ばれます 定義 部分空間法 部分空間の何らかの意味での直交系を構成し 次式によって連立一次方程式の近似解列を構成する方法を一般に部分空間法という 行列の性質にもよりますが 部分空間は次数が大きくなると集合として大きくなります 上の定義で は初期解からの正味の移動を表します ステップを踏むごとに正味の移動を表すベクトルが探索できる範囲が拡大するので 効率的な探索が期待できます 直交化 法において 直交化の操作は本質的です 部分空間法の枠組みでも 直交化が解法を特徴付けます 部分空間では 次のような直交化法を用います つのベクトルをインプットとし をかけるごとに と同じ要領で直交化します インプットであるは 任意のベクトルとします アウトプットであるベクトル集合 は標準内積の意味で部分空間の正規直交系です 過程 過程は 過程と呼ばれるものの特別な場合です 過程は と似た形をしています 過程を対称行列に適用すると 過程になります これらの方法は 固有値の数値計算でも用いられます 法の位置づけ 部分空間法の枠組みで法を考えます まず 初期残差ベクトルから始まる過程を用いて 残差ベクトル集合 が部分空間の標準内積の意味で直交基底をなすようにします これは前節での補題に対応します さらに 次を仮定します これは 条件と呼ばれます 仮定 直交条件 各 に対して 次式を仮定する この条件は 前節での補題に対応します これらを用いて計算することで 法のアルゴリズムが導出できます 計算は少々混み入っています 逆に どのような意味で部分空間の直交基底を構成するか 直交条件の代わりにどのような条件を仮定するかで 導出されるアルゴリズムは異なります それら変種のアルゴリズムは あたりに詳しく書いてあります 法を使ってみる この節では 法を実装して計算してみます 実装 実装の前に 多少の式変形によって 次のように書けます 今回は こちらを用います また 今回書いたプログラムは素朴で あまり良いコードではありませんもちろんいつものことですが 次の連立一次方程式を考えます 最大の反復回数は回 収束判定は残差ノルムが を下回った時点で終了としました 各反復の残差ノルムの値を以下に示します ちなみに解は となりました コードの実行結果 コード コード インポート コード インポート 行列 ベクトル積 法 ₀ ϵ 探索方向ベクトル 残差ベクトル 行列 ベクトル積 近似解 ₀ ₀ 残差ベクトルのノルム コード インポート ₀ ϵ ₀ ϵ 参考文献 戸川隼人 共役勾配法 教育出版 森正武 数値解析 共立出版 杉原正顕 室田一雄 線形計算の数理 岩波書店 藤野清次 張紹良 反復法の数理 長谷川里美 長谷川秀彦 藤野清次 訳 反復法 朝倉書店 増渕正美 嘉納秀明 訳 関数解析による最適理論 コロナ社 記事一覧に戻る 
 誤差に関する話題 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 誤差に関する話題 最終更新 記事の内容 計算機内の数値表現 誤差 今回は誤差に関するまとめ記事です 計算機内の数値表現 誤差 参考文献 記事一覧に戻る 
 加速法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 数列に対する加速法 最終更新 記事の内容 加速法の概要 概要 の加速法 アイデア 実験 の加速法 アイデア 実験 コード 今回は少し地味ですが 数列に対する加速法をとりあげます 代表的な加速法であるの加速法との加速法を実験します 加速法の概要 概要 加速法は 数列や級数の極限への収束を早くする方法です 法などの反復法や 数値積分のような級数計算において利用されます また 和算においては古くから知られていことでも有名です 今回はこの加速法の中でも代表的なものをつご紹介します この記事での議論は厳密ではないので 詳しくは を参照してください の加速法 ここでは つ目の加速法 の加速法について基本的なアイデアを紹介し 実験します アイデア の加速法の基本的なアイデアを述べます 収束する数列 を考えます この数列の極限値をとします この数列が以下のように 近似的に かつ漸近的に極限値と減衰する成分に分解できるとします 数列の収束が遅い場合 この減衰項の影響を考慮した方が良さそうです まず この減衰項のオーダーを見積もるため を求めます 十分大きいに対して として求められます そこで 次のように定めます 次に このを用いて 元の数列 よりも早く収束する数列を構成します 次のように定めます 同様に を に置き換えることでさらに早く収束する数列 が構成でき その後も引き続き構成できます さて 上式のような数列はなぜ収束が早くなると期待できるのでしょうか次のように分解して考えます これは点と点の内分点 または外分点を表します 内分・外分の比は です 次に の符号で場合分けして考えます それぞれの場合について 新しい数列の想定される挙動を考察します まず の場合を考えます このとき 元の数列 は極限にほとんど単調に近づきます また の絶対値が大きいほど元の数列の収束は遅いでしょう 外分点 はからは遠く に近い点です また の絶対値が大きいほど からはより遠ざかります したがって 新しい数列 は 元の数列の極限により近づきます 逆に 内分点 はとの間の点です また の絶対値が大きいほど に近くなり から遠ざかります したがって 極限により近づきます 実験 の加速法を適用して 実験してみます ここでは例をつほど示します 元の数列を を加速させた数列を で表します 今回の実験では 段階加速させました 例 まず つ目の例です 以下の数列を考えます この数列の極限は以下の通りです また の値を求めると 以下のようになります 下図に の加速法を適用した誤差を対数スケールでプロットしました 狙い通り 加速させるほど極限値への収束が早くなります コードの実行結果 例 次に つ目の例です この例では となります 先ほどまでは この数列の極限は以下の通りです また の値を求めると 以下のようになります 下図に の加速法を適用した誤差をプロットしました 元の数列の収束はかなり遅いです どうやら加速もうまくいってそうです 他の境界的な例でもうまくいくのか気になりますね この例では偶然うまくいっているだけかも コードの実行結果 の加速法 ここでは つ目の加速法 の加速法について基本的なアイデアを紹介し 実験します アイデア 前節のの加速法では の値が既知であることが前提です やってみると分かるのですが 求めるのが意外と大変です の加速法はを推定し 似たようなことを行います 前節のの推定値として 次のを用います 実際 次のように変形すると推定値として妥当であることが分かります これを推定値として 次のように新たな数列を構成します この式自体は の加速法とほぼ同じです さらに変形すると 次のようになります これで の情報がなくても加速させた数列が構成できます また 何段階にも加速できます 実験 の加速法を適用して 実験してみます ここでは例をつほど示します 元の数列を を加速させた数列を で表します 今回の実験では 段階加速させました 例 以下の数列を考えます 前節のつ目の例と同じ数列です 下図に の加速法を適用した誤差をプロットしました コードの実行結果 例 以下の数列を考えます 自然対数の底の定義式なので 極限は以下の通りです 下図に の加速法を適用した誤差をプロットしました コードの実行結果 例 最後の例です ここでは 以下の部分和をもつ無限級数の収束を加速させます よく知られている通り この級数の極限は以下の通りです 下図に の加速法を適用した誤差をプロットしました コードの実行結果 コード コード インポート コード 関数の定義 数列を計算する関数 ₀ ₀ の加速法 λ λ λ の加速法 λ λ の加速法 の加速法 コード 実験 数列の計算 λ λ λ λ λ 誤差の計算 プロット コード 実験 数列の計算 λ λ λ λ λ 誤差の計算 プロット コード 実験 数列の計算 誤差の計算 プロット コード 実験 数列の計算 誤差の計算 プロット コード 実験 数列の計算 誤差の計算 π プロット 参考文献 杉原正顕 室田一雄 数値計算法の数理 岩波書店 有本卓 数値解析 コロナ社 藤野清次 数値計算の基礎―数値解法を中心に サイエンス社 伊理正夫 藤野和建 数値計算の常識 共立出版 記事一覧に戻る 
 スライスサンプリング 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 スライスサンプリング 最終更新 記事の内容 基本的なアイデア 概要 アイデア シンプルな例 アルゴリズムの構成 方針 アルゴリズムのまとめ 例 混合正規分布からのサンプル コード 今回はスライスサンプリングの記事です の中では地味な気はしますが 基本的なアイデア 概要 スライスサンプリングは 連鎖モンテカルロ法の一種で により提案されました といえば 法や が中心で スライスサンプリングは割と地味です 一方で 論文を読んでいると本質的でない部分にちょこちょこ登場するので 記事にまとめることにしました アルゴリズム自体はシンプルなアイデアから導出されますが 細かい調整 やが必要で意外に厄介です また アルゴリズムは文献ごとに少しブレがあるようです この記事も 元論文とは少し異なります また 以下変数の場合のみを考えます アイデア スライスサンプリングの基本的なアイデアを述べます サンプルが欲しい目的の分布をとします このは正規化定数を用いて次のように表されるとします 以下 定数分違うだけなので とを同一視します このを用いてサンプルを生成します まず 次の式に注目します ここで と定めます もしからのサンプルが得られれば の成分のみを取り出して のサンプルが得られます しかも はある種の一様分布です なんとかサンプリングできそうです 密度関数は 例えば次のような形をしています イメージ ということで ちょっと変わった形の一様分布からのサンプルが得られればうまくいきそうです そこで 次の集合が鍵となります これは を固定するごとに が値をとる集合です 以降 この集合を高さのスライスと呼びます この集合は空でなければ のグラフを高さで水平に横切るような集合です 文字通り グラフをスライスするイメージです スライスが特定できれば 一様分布からのサンプルはできそうです ということで 以下の議論は どうやってスライスを求めるかが問題になります 単調な関数なら解析的に求まりそうです その前に もしスライスが計算できたとして その後どのようにサンプリングを行うかを述べておきます まず 初期値を与えておきます 次に スライスの高さを決めます 次に高さのスライスを計算します このスライスをもとに 新たなサンプルを と計算します これを続けてサンプル列が構成できます 詳細なアルゴリズムは後ほどご紹介します シンプルな例 上記のアイデアは本当にうまくいくのでしょうか試してみます 次のような確率密度関数をもつ分布からのサンプルを計算します コードの実行結果 つまり 閉区間 に定義域を制限した指数分布です 先ほどの記号で言えば 右辺がに相当します 高さでのスライスは 以下の通りです 単調な関数なので 解析的に計算できます そして 先ほどのアイデアを素直に実装した結果が以下の通りです とし サンプル数は 期間としてサンプルを除去しました コードの実行結果 指数分布が再現できました また 各サンプル点赤点とスライス青点線の変化をアニメーションで示しました コードの実行結果 アルゴリズムの構成 方針 ここからは もう少し複雑な場合を考えます 先ほどの例では 逆関数が解析的に計算できました しかし 逆関数は常に計算できるとは限りません ここからは 逆関数が簡単には求まらない場合に スライスを近似的に計算する方法を考えます 方針としては まず現在のサンプル点を含む小さい区間から出発して 少しずつ区間を広げていきます 区間がスライスから少しはみ出たところで 逆に区間を少しずつ小さくして 次のサンプル点を計算します 区間を広げていく過程を 狭くする過程を と呼びます ここまでの話をまとめておきましょう まず 冒頭に紹介したアイデアスライスするがアルゴリズムの根幹をなします したがってスライスサンプリングの基本的な流れは次のようになります を一様分布からサンプルする のグラフをの高さでスライスする をスライスした区間上の一様分布からサンプルする このうち 番目のスライスに伴う区間の計算が困難な場合を考えます これを実現する方法が と です このつで区間計算を代用します を一様分布からサンプルする をスライスした区間上の一様分布からサンプルする ということで このつの操作を簡単に解説します いま 手元にサンプルがあるとします このサンプルをもとに 目的の分布からの新たなサンプルを生成する方法を考えます 基本的には冒頭のアイデア スライス上の一様分布からのサンプルです そして 今はこのスライスを近似的に計算することが目的です スライスの高さも手元にあるとします 高さのスライスは と表されます 典型的には スライスはの両側に幅を持って広がっています 最初に小さめの区間をとって とほぼ一致するまで広げていくことで スライスを近似できると期待できます これを と呼びます 以上のアイデアを定式化しておきます まず 幅と最大反復回数を予め定めておきます 既にサンプルと高さが計算してあるとします 初期区間 を以下のように 幅の区間としてとります その後 はずつ減らしていきます 逆に はずつ増やしていいきます 最大で回反復計算します 端点がスライスからはみ出るタイミング すなわち で計算を止めるのが適当です 以上が区間を広げる過程です 次に 広げた区間から新たなサンプルを生成します そもそもスライス上の一様分布からのサンプルが欲しいので 近似区間がスライスからはみ出ていては困ります ということで 広げすぎた区間を 必要ならば縮めながらサンプルします 　具体的には 近似した区間上の一様分布からのサンプルを計算し 新たなの候補とします これがスライスからはみ出ているならば 区間を縮めます 逆に スライス内ならば縮める必要はありません 新たなサンプルとして採択します もう少し詳しく述べます まず で計算した近似区間から 候補サンプルを と計算します これがスライスからはみ出ているか判定します もし ならばスライス外です このとき 端点の一方を で置き換えて 区間を縮めます 区間を縮めて候補を再計算します これをスライス内のサンプルが得られるまで繰り返します アルゴリズムのまとめ 以上をまとめて 以下のアルゴリズムが得られます スライスサンプリングのアルゴリズム 例 混合正規分布からのサンプル 上記のアルゴリズムでサンプルできるか 実験で確かめます 混合正規分布からのサンプルを計算します 以下の実験では を既知とします コードの実行結果 スライスサンプリングを用いて計算した結果を以下に示します サンプル数はとし 期間としてサンプルを除去しました コードの実行結果 また 各サンプル点赤点とスライスの近似青点線の変化をアニメーションで示しました コードの実行結果 コード コード インポート コード インポート 密度関数の主要項 β β ≤ ≤ β β ββ コード インポート 区間を計算する β β ≤ β ₀ β 初期値と保存用配列 ₀ のサンプル のサンプル β コード インポート β β コード インポート コード インポート β ≤ β コード インポート 混合正規分布 コード インポート 区間の端の更新 の場合はを にする ≤ との初期値 との更新 区間の端点と候補点 ≤ 区間の端点の更新 コード インポート コード インポート コード インポート 参考文献 記事一覧に戻る 
 深層学習の基礎 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 深層学習の基礎 最終更新 記事の内容 概要 基本的なアイデア アルゴリズムの構成 順伝播 方針 誤差逆伝播 確率的勾配降下法 アルゴリズム 例 例 分類問題 例 回帰問題 コード 本記事では 深層学習の初歩的な解説と素朴に実装したプログラムをご紹介します 概要 基本的なアイデア 機械学習の動機のつは データを作り出す関数を特定することです 例えば線形回帰なら 線形の関数からデータが生成されると仮定して その正体を特定します しかし 予め「線形」という制約が入ります 線形性により 関数の表現力は著しく低下し 現実のデータでは多少無理が生じます そこで 関数の形状を指定することなくデータから学習できれば理想的です その実現方法のつが深層学習です 深層学習では単層の を多数つなげたモデルで学習を行います 以下 教師あり学習のみを扱います 一般的な定式化をしておきます 手元に 教師ありデータ があるとします このデータから 入出力の関係 を学習します この関数について何か手がかりが欲しいところです そこで 入力に対する基本的な変換 線形変換と非線形変換を複数回施すことにします すなわち 以下のような関数を考えます は行列で はベクトルです それぞれ 重み バイアスと呼びます また は非線形関数です これは深層学習の枠組みでは 活性化関数と呼ばれます 表現を簡潔にするため 上の式を次のように段階的に書きます これを 層の順伝播と言います 深層学習では この関数がデータの入出力の関係 を与えるように パラメータ を決めます 次節では これらのパラメータを決めるためのアルゴリズムを構成していきます アルゴリズム 本節では 深層学習のアルゴリズムの根幹をなすつの要素 順伝播 逆伝播 確率的勾配降下法を簡単に解説します 順伝播 前節の深層学習モデルにより 重みとバイアスが与えられれば出力 が計算できます この計算を順伝播と言います 深層学習では この順伝播の計算は何度か行います 実装は簡単で 前節のように線形変換と非線形変換を繰り返すだけです より詳細に定式化しておくと 以下のようになります ここで とします 以下 に対応する を と表記します 方針 パラメータ を定めるための方針を述べます 基本的には最適化問題として定式化します のデータへの当てはまり具合を評価するために 次のような指標を用意します ノルムは通常のノルムです この指標をコスト関数と言います 深層学習では コスト関数を最小値するようなパラメータを求めます ということで 以下の最小化問題を解くことが目標です 最小化問題を解く方法は様々あります とりあえず 最もシンプルな最急降下法を用います 最急降下法は 目的関数の勾配を利用して反復的に近似解を構成する方法です 第反復では 以下のように更新します は学習率と呼ばれます ということで コスト関数の勾配が求まればよさそうです しかし 重みやバイアスのコスト関数への寄与は一般に複雑です 有限差分近似などの方法もありますが 精度や計算コストの観点から避けた方が良いでしょう そこで 次の誤差逆伝播法を用います 誤差逆伝播 誤差逆伝播法は コスト関数の勾配を求める方法です ここで 次のようなベクトルを用意します 連鎖律から 次のような式が得られます は要素ごとの積積です 勾配を計算するにはが必要です しかし は添え字の大きい方から計算する必要があります これは順伝播とは逆方向の演算なので 逆伝播と呼ばれます この計算は本質的に自動微分と同一です したがって 実装する際には自動微分のライブラリを呼び出せばです本記事のプログラムでは自動微分を使わずに 素朴に実装しています 確率的勾配降下法 これで勾配の計算はできそうです 深層学習では 普通の最急降下法ではなく 確率的勾配降下法を用います これは 各反復でデータの中からサンプルもしくは一部のサンプルを用いて最急降下法を適用する方法です 一部のサンプルを使うと反復ごとに勾配が異なるため 局所解から抜け出すことができると期待できます このサンプルは例えば一様分布に従って選びます サンプルを使う場合の確率的勾配降下法の更新式は以下の通りです 勾配は先ほどの誤差逆伝播法から計算できます アルゴリズム 深層学習のアルゴリズムの基本的な形は以下の通りです の訓練 例 例 分類問題 まず 分類問題に取り組みます 下図のように赤い点と青い点の 種類が存在するとします このつのカテゴリの境界を求めます 赤い点は 青い点は から発生させた乱数を座標とします データサイズはです コードの実行結果 入力層から とします 活性化関数は いずれも以下のシグモイド関数です 厳密には シグモイド関数を成分とするベクトル値関数です 学習後の関数は次元のベクトル値関数です 最終的には 第成分の方が大きければ赤色の点と同じカテゴリー 第成分の方が大きければ青色の点と同じカテゴリーとみなします 学習率は 反復回数はとします 以下に学習後の分類の境界を示します 赤い領域は 赤い点と同じカテゴリに入るとみなされます コードの実行結果 分類はうまくいってそうです 以下に コスト関数の勾配のノルムの増減の様子を示します コードの実行結果 例 回帰問題 つ目の例は回帰問題です 以下の関数をもとにノイズを加えたデータ点を作成します ノイズは正規分布から発生させます また データサイズはです コードの実行結果 学習は 入力層から とし 活性化関数はシグモイド関数です 学習率は 反復回数はとします 以下に結果を示します コードの実行結果 端のあたりの再現に失敗しました まだ層数やユニット数 活性化関数 学習率などは調整中です 以下にコスト関数の勾配のノルムの増減の様子を示します コードの実行結果 コード コード インポート コード 関数・複合型の定義 各層 δ 第層の計算 第層より前の計算 ϵ ϵ ϵ ϵ ϵ ϵ ϵ コード データ作成 分類問題 データサイズ データ生成は各座標 はラベル コード の訓練 分類問題 σ σ σ σ ϵ ϵ コード 学習の結果 分類問題 コード コスト関数の様子 分類問題 コード データの作成 回帰問題 推定したい関数 データの作成 プロットで確認 コード の訓練 回帰問題 データのサイズを変換 σ σ ϵ ϵ コード 学習の結果 回帰問題 コード コスト関数の様子 参考文献 須山敦志 ベイズ深層学習 講談社 岡谷貫之 深層学習 講談社 記事一覧に戻る 
 法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 法 最終更新 記事の内容 基本的なアイデア 概要 物理的イメージ アルゴリズムの構成 系の導入 法による離散化 微分方程式の数値解法 アルゴリズム 数値実験 例 次元正規分布からのサンプル 例 混合正規分布からのサンプル コード 前に一度とりあげましたが をもう一度 説明も割と被ってます 一応動機を述べておくと 深層学習や確率的勾配動力学法のための準備のつもりです 基本的なアイデア 概要 法は 主に推論で用いられるサンプリング近似法の一種です とも呼ばれ と省略されます の中でも特に効率的な方法です の元のアイデアは物理から借りてきたものです 直感的にはわかりやすい反面 数理的に解析するには幾何的なアプローチをとるため 難解です の拡張が提案される際には 幾何が登場します また 系の文脈ではシンプレクティック幾何が絡んできます さらに とが提案したも正直訳がわかりません 今回はあくまで今後の準備のための記事なので 難しい話は無しです そもそも説明できませんし 本当はうまくいかない例を記事にしたかったのですが なかなか大変だったのでまた機会があれば紹介します 特に階層モデルに対するは全然うまくいきません 今 試行錯誤しているところです とりあえず今回は綺麗で簡単な例だけです 物理的イメージ の基本的なアイデアを述べます そもそもでやりたいことは ある分布以下 目的の分布からのサンプルを発生させることです そのサンプルを使って期待値などを近似します 目的の分布からのサンプルを得るためには 分布の中でも確率の大きい部分のサンプルが十分得られれば それなりの精度で近似できると期待できます 典型的には 密度関数は次のような形状をしています現実にはもっと複雑な形状かもしれません この密度関数の上の部分ほど確率が大きいです したがって 上の部分周辺をうろちょろしたい訳です 突然ですが ここでこの密度関数を上下ひっくり返してみます ひっくり返したので 下の窪んだ部分からのサンプルが欲しいですね したがって 次のように玉を転がすイメージでサンプルできれば理想的です 窪んだ部分の周辺を満遍なく転がせば 分布は再現できると期待します このアイデアをもとに のアルゴリズムを構成していきます アルゴリズムの大まかな流れを説明します 目的の分布が次のように書けるとします は上の図のように窪んだ形をしているとします このを ポテンシャルエネルギーと呼びます 今 前回のサンプルが手元にあるとします ここから出発して 先ほどの玉転がしを物理的にシミュレートします ここでいう物理的とは 微分方程式でシミュレートすることを指します 当然このシミュレートには微分方程式の数値解法を用います 適当な反復回数と適当な刻み幅で軌道を計算します 軌道を計算して行き着いた先が 新しいサンプルの候補です この候補を棄却するか 採択するかは 法と同様に吟味します 要するに ポテンシャルエネルギーが小さくなる方へ下っていき エネルギーが小さくなれば採択します アルゴリズムの構成 この節では 玉転がしのシミュレート方法を具体的に考えます 系の導入 先ほどと同じ記号を用います 関数は 目的の分布に関する情報を集約したものです ここで 新しい変数を導入して 次のような関数を定めます もちろん欲しいサンプルはだけです は便宜上導入して あとで無視すれば大丈夫です これは 物理ではとして知られています 可分な系 次の に対応する系は 次式で表される ということで 上で定義した関数をとする系を反復ごとにシミュレートすることにします サンプルしたいは位置に相当し は運動量に相当します は系の全エネルギーを表し 時間に依存せず 少なくともの文脈では 保存されます したがって 系をシミュレートしても到達できる位置は限定されます そこで 反復ごとに運動量を変えて確率的な揺らぎを加えます 普通は 運動量は標準正規分布からとってきます 要するに 同じような転がり方だけでは満遍なくサンプルできないので 時々玉を別の方向に弾いてやるってことです あとは が定める微分方程式を如何に解くか という問題が残っています 前回のサンプルと 正規分布からサンプルした運動量を初期値として 以下の微分方程式を解きます これを解くのに 法を用います 法による離散化 微分方程式を数値的に解くためには 離散化する必要があります 離散化の仕方によって数値解法が決まります で用いる 法は 次のように離散化します 法 法のステップ 法は 半ステップごとに更新します 法とも言います このスキームは 天文学の分野で が 分子動力学の分野でがそれぞれ独立に発見しました しかし どうやらが遥か前に発見していたようです さらに も発見していたとか 微分方程式の数値解法 法に関して補足しておきます なぜ 法が必要なのでしょうか まずは数値解法を整理しておきましょう 次の階微分方程式を考えます このような微分方程式の数値解法として有名なものをつほど導入します 以下 を離散化の幅 とし をの近似値とします つ目は 陽的法です スキーム 陽的法 つ目は段次 法です スキーム 段次 法 ただし とする 微分方程式の数値解法の適用範囲を広げるため 階数をつあげます つまり 階の微分方程式も考えることにします ここで 次のような変数を導入します このとき 上の階常微分方程式は以下のように書けます このように 階の微分方程式であっても 階に帰着します したがって 先ほどの数値解法 陽的法 段次 法も適用できます もうつだけ数値解法を導入します つ目の数値解法が 法です スキーム 法 法 数値解法をつほど導入したところで これらを比較します 例題として 問題を考えます 問題 次の微分方程式系を考える この系の解の様子をそれぞれの解法について プロットして確かめる さらに この系は系である そこで の値の変化も確かめる 上つきのドットは時間微分を表します 問題も階の系に帰着します 次のようにおきます よって 次のように書けます 以上より と書けます 上式に様々な解法を適用します また は で与えられます 下図は ステップ数で ステップ幅 とした場合の軌道のアニメーションです 初期値は 以下のように設定しました コードの実行結果 法の軌道はかなり外れています その他の解法は一定の軌道を描いています 以下に の時間変化を示します サンプル分計算しました コードの実行結果 長時間軌道計算すると 法の誤差は大きくなります 一方 法 法は誤差が一定です 特に 長時間計算した際に 顕著な差が現れます この解法は エネルギー保存という系の性質を保っています アルゴリズム 以下にのアルゴリズムを示します ここで 目的の分布の密度関数は以下のように書けるとします また ポテンシャルエネルギーを以下のように定義します さらに を以下のように定義します 法 数値実験 つほど実験結果を載せます 例 次元正規分布からのサンプル これは以前にも用いた例です 次の正規分布からサンプルします 密度関数は次式で書けます ポテンシャルエネルギーは以下の次形式です ちなみにプログラムの方では ポテンシャルエネルギーやその勾配を求めなくてもサンプルできるようにしています これくらい斜めに歪んでいると ではうまくいきません 原点を初期値 サンプル数を の総ステップ数を 刻み幅を としました また 最初のサンプル分は 期間として除去しました 以下にサンプルの結果を示します コードの実行結果 例 混合正規分布からのサンプル 次に 混合正規分布からサンプルします 平均が角形を描くように正規分布をつ混合しました コードの実行結果 コード コード インポート コード 微分方程式の数値解法の実装 内部段の計算 ₂ ₁ ₂ ₁ ₃ ₂ ₃ ₂ ₄ ₃ ₄ ₃ との更新 ∇ コード 問題 ∇ ∇ ∇ ₁ ₂ コード の誤差 ∇ ∇ ∇ コード の実装 Δ α Δ ≤α ₀ ₀ ₀ ∇ ₀ ∇ λ₀ β₀ α μβ λ β λ λ₀ β β₀ λ α ∇ λ λ₀ λ ∇ λ λ λ λ λ λ λ λ β α μβ λ β コード 正規分布からのサンプル μ Σ μ Σ ₀ ₀ ₁ ₂ コード 混合正規分布からのサンプル θ π μ θ πθ πθ Σ μ₀ μ θ μ₁ μ θ μ₂ μ θ μ₃ μ θ μ₄ μ θ μ₀ Σ μ₁ Σ μ₂ Σ μ₃ Σ μ₄ Σ ₀ ₀ ₁ ₂ 参考文献 記事一覧に戻る 
 仮定密度フィルタリング 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 仮定密度フィルタリング 最終更新 記事の内容 概要 アルゴリズムの構成 問題設定 近似分布の導入 指数型分布族による近似 数値実験 コード 今回は仮定密度フィルタリングです 期待値伝播法のための準備回です 概要 この記事では 仮定密度フィルタリング を扱います 事後分布を近似するタイプのオンライン学習手法です 使い勝手は悪そうですが アイデアはシンプルです 仮定密度フィルタリングを扱っている文献は結構少なめです 文献 あたりが参考になりそうです アルゴリズムの構成 問題設定 データ が時刻 において順に得られるとします モデルをとします ここで とします 手元には データ と解析的には扱いづらい事後分布 の近似分布があるとします ただし は事前分布とします ここでは 次の計算を目標とします 新たなデータが手に入ったとき 事後分布 を計算したい ただし 事後分布が解析的には扱いづらい状況を考えているので 近似を試みます 今 手元にあるに関する最良の情報は事後分布 の近似であるです そこで 次の事後分布が計算できれば良さそうです は正規化定数です ただし この事後分布も計算できるとは限りません これを近似します なお 状態空間モデルなどでは 事後分布の定義式のの部分を期先予測に置き換えることもあるようです 近似分布の導入 事後分布を近似します すなわち 以下の近似式が成り立つようなを考えます 問題は をどの分布のクラスから持ってきて どの意味での近似にするかです まず 分布のクラスを決めます これは都合の良い分布であれば何でも良いと思います 共役性を用いたいのであれば 事前分布と同じクラスにするのもつの選択です この分布の確率密度関数の族をと表します また どの意味での近似にするかですが ダイバージェンスの意味での近似が最も自然です このようにして 新たにデータが得られるごとに 事後分布の近似分布が求まります 要するに データが手に入るごとに事後分布を都合の良い分布のクラスに射影するということです 指数型分布族による近似 近似分布を具体的に計算するためには 最小化問題を解く必要があります 都合の良い分布のクラスが指数型分布族の部分集合であれば もっと単純になります 一般に指数型分布族の確率密度関数は次のように書けます ここで 記号は次のように定めました ここでは 近似分布が指数型分布族の場合を考えます パラメータが決まれば 近似分布がつ定まります すなわち 上のようなある関数 に対して あるに対して としておきます ダイバージェンスを最小化したいので に関して微分します 微分すると次のようになります 行列はの行列です 一方 規格化条件 を微分して 次を得ます 以上より 次式を得ます 行列が正則性ならば 次式を得ます 逆に これを満たすようにを取れば ダイバージェンスは最小になると期待できます この方法をモーメントマッチングと言います 数値実験 以下に簡単な実験結果を示します ほとんど近似の意味のない自明な例になってしまいました 真の分布は混合正規分布とします また モデルは正規分布とします は既知とします 組個の真の分布からのサンプルからなるデータ集合が全部で個 逐次的に手に入るとします 平均パラメータの事前分布は標準正規分布とします モデルが正規分布 その平均の事前分布が正規分布ですから 事後分布は解析的に計算できて 正規分布です ここでは あえてこの事後分布を近似することにします 事後分布は 次のような正規分布の族により近似します 以上の設定から分かるように 正規分布を正規分布で近似するだけのつまらない例です また別の記事で複雑な例を扱います 下図に データ 真の分布 モデルのつを示しました モデルには平均パラメータの初期値を放り込んでいます 学習がうまくいけば これが真の分布側にスライドしていくと考えられます ここでは としています コードの実行結果 それでは近似計算をしてみましょう 今回のケースは簡単です まず 正規分布族は指数型分布族の部分集合ですから モーメントマッチングによりパラメータの更新式が得られます 正規分布を指数型分布族の定義式に合わせて書いておきます 時刻での近似分布が手元にあるとして 時刻における近似分布を計算します といっても 近似分布が正規分布なので 平均パラメータと分散パラメータが分かればです 近似分布に関するの期待値計算から を得ます 一方 近似したい分布に関するの期待値計算から を得ます ここで とします よって 近似分布のパラメータ更新式は次式で与えられます 正規分布を正規分布で近似するので 自明な更新式です この更新式に従ってデータが手に入るごとに更新していきます データが組あるので 回更新します 結果を以下に表示します モデルに学習後の平均パラメータを代入しました 当然ですが うまくいってますね コードの実行結果 コード コード インポート コード データの作成等 μ₁ μ₂ σ₁ σ₂ μ₁ σ₁ μ₂ σ₂ μ₁ μ₂ σ₁ σ₂ μ₁ μ₂ σ₁ σ₂ σ₀ μ μ σ₀ コード 学習と結果 μ σ σ₀ μ σ σ₀ μ σ σ₀ σ σ₀ σ σ σ₀ μ σ σ₀ パラメータ保存用 μ σ μ σ μ σ μ σ σ₀ μ σ σ₀ 参考文献 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 変分推論法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 変分推論 最終更新 記事の内容 概要 問題設定 基本的なアイデア 平均場近似 平均場近似の考え方 例 正規分布の推論 確率的変分推論 確率的変分推論の考え方 例 の分類問題 コード この記事では 変分推論法について解説します 最も有名な平均場近似を用いた手法と ミニバッチ学習に対応した確率的変分推論法を紹介します 確率的変分推論法は 元々 で提案された手法ですが ここではもっと広い意味で用いています 原論文では確率的最適化と自然勾配の考え方を用いていますが ここでは「確率的最適化をベースとした変分推論法」程度の意味で用いています 概要 問題設定 変分推論は 複雑な事後分布を近似する方法です とは違い 最適化がベースです まず どういう状況で用いる手法なのか 問題設定を確認しておきます 手元にデータ があるとします このデータを発生させた分布を推定することが目的です モデルをでモデル化したとします ここで はパラメータです このパラメータの事前分布をとします すると事後分布が計算できます この事後分布の平均を計算したり モデルを事後分布で重みづけて予測分布を計算するには事後分布が複雑すぎるとします 解析的に扱えない場合 や変分推論法が用いられます 次に 変分推論法の基本的なアイデアを述べます 基本的なアイデア 変分推論法では 事後分布を近似する分布を構成します 目標は 次のような分布を 予め定めた分布族から見つけることです ここで 次の点が問題になります 近似分布は事後分布にどういう意味で近いのか 分布族はどのように設定するか まず点目 分布間の近さは ダイバージェンスで測るのが自然です 近似分布と事後分布の間の ダイバージェンスが最小になるように近似分布を定めます もう少し詳しく見てみましょう 次のような数量を定めます すると と の間の ダイバージェンスは 次のように書けます ダイバージェンスが非負であることから 次式が得られます が周辺尤度（エビデンス）の下界であることから この量を と呼びます 当面の間の目標は ダイバージェンスの最小化ですが これはの最大化と等価です なお の符号反転は変分自由エネルギーと呼ばれます 次に点目です 分布族の決め方はいくつかあります 最も有名な方法が平均場近似です 平均場近似では 近似分布を具体的には指定せず 事後分布が都合よく分解できると仮定します 分解できるという仮定のみでも 事後分布はいい感じに求まります 他には 予め分布を指定する方法があります 例えば予め正規分布で近似できると仮定して パラメータを決めてやります 以下 このつのアイデアを詳しく掘り下げていきます 平均場近似 平均場近似の考え方 平均場近似では 近似分布が属する分布族を次のように定めます ある確率（密度）関数 が存在して このような分布族から持ってきた近似分布について 各 に対して は次のように書けます ここで 上式の期待値は 次のようにとります つの分布が一致するときにダイバージェンスが最小になることから 各 に対して因子が定まっているときに と因子を更新することで が最大になります 適当な初期分布から初めて更新を繰り返していけば がどこかで頭打ちになるはずです このとき近似分布は事後分布に十分近いと期待できます 正規分布の推論 ここでは例として 正規分布の平均と精度の事後分布を推定します モデルが正規分布で パラメータが平均パラメータと精度パラメータにあたります 次のような生成過程を考えます は定数です このとき事後分布は次のようになります 例えばこの分布の平均を求めるのは困難です ということで変分近似を行います 次のように分解されるとします 先ほど導出した期待値計算を含む分布を導出すると 以下のようになります の近似分布は正規分布 の近似分布はガンマ分布であることが分かります それぞれの分布を次のようにおきます すると 次のように書けます これを更新式として 次のようなアルゴリズムが得られます 実際には が上記の更新で変化しないので ループの外に出して実装します 正規分布に対する変分推論アルゴリズム ちなみに の値は以下のようになります 少し長いです はガンマ関数 はディガンマ関数です 以下に実験結果を示します 真の分布は混合正規分布 としました この分布からデータを点発生させました とします また 初期値は とします 左下図の等高線は 近似事後分布を表します また によって真の事後分布からサンプルし プロットしました緑点 実際の事後分布と近似事後分布は一致しているように見えます また 右下図は の変化の様子を示しました 回目の更新で収束しています コードの実行結果 近似事後分布からサンプルを発生させて 予測分布を計算しました青線 緑色が真の分布です また で得た事後分布からのサンプルを用いて 真の予測分布を計算しました赤色 予測分布同士はほぼ一致しています コードの実行結果 確率的変分推論 確率的変分推論の考え方 確率的変分推論は 冒頭で述べたとおり 少し広い意味で解説します 確率的最適化をベースとしたミニバッチ版の変分推論を指します 平均場近似とは異なり 予め近似分布が属する分布族の分布形を指定します すると 先程のような期待値の指数関数とは異なる形が導出されます 例として 次のような正規分布を仮定します ここで 近似分布のパラメータを とおきました 確率的変分推論では を全データではなく一部のデータ（ミニバッチ）で近似します ここではデータ点つからなるミニバッチを考えます より一般に複数データをミニバッチとする場合には各データから計算できるを平均します データ点 を全データからランダムにサンプルします このデータを用いて を次のように近似します この近似値を最大化することで 近似分布のパラメータを定めます の微分値が求まれば 最急上昇によって最大化できます ということで 上の近似値を微分します まず第項の期待値の微分を考えます ここで はからのサンプルとします さらに 期待値内の微分計算については次のようになります 次に 第項の微分を求めます ここでは 事前分布を次のような正規分布に限定します ここで は定数とします すると 第項は解析的に計算できて 次のようになります これをパラメータ値に関して微分することで 次式を得ます 以上の結果から パラメータ値を次のように更新すればが最大になると期待できます 更新幅は例えばのようにとります の分類問題 上のような考え方を用いて実験します ここでは による二値分類を行います まず 次のような を考えます はシグモイド関数とします また 中間層のユニット数をとします さらに 次のようなモデルを考えます ここで は次のようにパラメータをまとめたベクトルとします は平面上の点座標を表します はラベルデータで 表現のベクトルです クラス赤色に分類される場合には とし クラス青色に分類される場合には とします 次のようなデータが得られたとします コードの実行結果 これらの点と対応するラベルをデータサイズのデータセット で表します 事前分布は次の正規分布とします 近似する分布族は先ほど定めた正規分布の族とします 前セクションのアイデアから 次のようなアルゴリズムが得られます の確率的変分推論アルゴリズム の値は厳密には計算できないので 適当な回数だけ更新することにします 今回の実験では回ほど更新しています また 更新幅は とし はが最も小さくなるような値に設定しました 計算の結果を以下に示します クラス赤点に分類される予測確率が高い部分が赤色で塗りつぶされます 実験はうまくいっていないようです カラーバーを見ると 付近の値しか出ていないので ほとんど全域に渡って赤とも青とも言えない状態です コードの実行結果 実験がうまくいかなかった原因は様々あると思います 近似が数カ所入っていることや ステップサイズ 更新回数などです プログラムにバグがある可能性もありますね また何か分かったら実験を追加します コード コード インポート コード 平均場近似 関数定義 μ λ α β β λλ αβα α α βα α β α μμλβ μλ β βαβ μ₀ λ₀ β₀ ϵ β μ μ₀ λ λ₀ α β β₀ μ λ α β β λ αβ μ αλβ β β μ μ λ μ λ α β β コード 平均場近似 μ₁ μ₂ σ₁ σ₂ μ₁ σ₁ μ₂ σ₂ β μ₀ λ₀ β₀ β ϵ μ λ α β μ₀ λ₀ β₀ ϵ β μ λ μ λ α β μ √λ μ α β λ μ λ μ λ μ λ α β μ₀ λ₀ μ λ μ₀ λ₀ β μ λ μ λ コード 予測分布の計算 μ λ μ λ α β μ λ μ λ コード 確率的変分推論 関数定義 ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₂ ₃ ₃ ₀ ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₀ ₂ ₃ ₂ ₃ σξ ξ Φ ₀ ₂ ₃ ₂ ₃ ₀ σ ₃σ ₂₂ ₃ λ √λ λ λ λ λ Φ Φ Φ Φ Φ Φ Φ λ Φ λ Φ λ Φ λ Φ ∇ ∇ μ λ ∇μ λ μ ∇λ λ μ ∇μ ∇λ ∇ μ λ μ √λ ∇ λ μ λ ∇μ λ μ ∇λ λ λ λ ∇μ ∇λ λ ϵ ϵ ∇ λ μ λ μ √λ λ ϵ λ λ ϵ コード 確率的変分推論 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ Φ Φ ₀ Φ ϵ λ λ ϵ λ λ λλ λ λ ϵ 参考文献 ビショップ パターン認識と機械学習 丸善出版 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 最終更新 記事の内容 概要 問題設定とモデル の学習 通常の の学習 の学習 近似 の学習 の学習 の学習 変分推論 コード 今回は について解説します 概要 問題設定とモデル は 通常の のパラメータに事前分布を仮定して推論を行う枠組みです この記事ではによる二値分類を行います 回帰については に書いてあります 早速ですが 今回使うデータとモデルを説明します を平面上の点 を対応するラベルとします ラベルは 表現されているとします クラスに分類される場合にはラベルは クラスに分類される場合には とします 以下にサンプルサイズのデータ集合 を示します コードの実行結果 赤い点がクラスに属するデータ 青い点がクラスに属するデータです 新しい点が与えられたとき どちらのクラスに分類されるかを予測することが目的です 予測のための確率モデルを設定します ここで は以下のような中間層のユニット数がの とします はシグモイド関数です は重みとバイアスを集めてベクトル化したパラメータベクトルとします パラメータの事前分布は以下のように設定します 事後分布や予測分布を計算するには パラメータのモデルへの寄与が複雑すぎます ということで 近似推論の枠組みが自然と要請されます 以下では つの学習手法を試してみます 通常の の学習 近似 法 確率的変分推論法 の学習 通常の の学習 まずは を使わないで予測を試みます 二乗平均誤差をコスト関数とする の学習を行った結果を以下に示します の出力の第一成分をクラスに分類される確率とみなし ヒートマップで表示しました 赤色の部分はクラスに属する確率が高いと予測されます 訓練データがつ誤分類されていますが まずまずの性能です コードの実行結果 の学習 近似 次に近似を用いる方法です 近似は 事後分布を次の正規分布で近似します ここで は推定量で は対数事後分布の行列です 展開から導出できます 以下に予測の結果を示します この近似した事後分布からのサンプルを用いて 予測分布を計算しました クラスに属する確率が高いほど赤く塗り分けられます カラーバーを見ると 付近なので 予測精度はいまいちです コードの実行結果 なお 実装に際して推定量は事後分布の確率密度関数をので無理やり最大化しました また 事前分布の標準偏差は に設定しました の学習 次にです 法の反復回数は ステップサイズは としました サンプル数は 最初のサンプルは期間として除去しました 事前分布の標準偏差は にしました 以下に予測結果を示します こちらも予測はうまくいっていません コードの実行結果 の学習 次はと を組み合わせたものです はで学習し を で推定します の事前分布は以下のガンマ分布とします このとき の条件付き事後分布は以下のようになります サンプル数や期間 法の設定などは先ほどと同じです 以下に予測結果を示します 予測はうまくいってそうです 通常の の場合と比べて 境界の白い曖昧な部分が少なくなっています コードの実行結果 の学習 変分推論 最後に確率的変分推論です これは昨日の記事で解説したものと同じです うまくいっていません コードの実行結果 コード コード インポート コード 共通の関数 ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₂ ₃ ₃ ₀ ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₀ ₂ ₃ ₂ ₃ σξ ξ Φ ₀ ₂ ₃ ₂ ₃ ₀ σ ₃σ ₂₂ ₃ コード データの作成 コード 通常の の学習 関数 Φ ₀ ϵ ∇ Φ ϵ∇ Φ Φ コード 通常の の学習 結果 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ Φ Φ ₀ ϵ ₀ Φ ₀ ϵ Φ コード 共通の関数 λ √λ λ λ λ λ Φ Φ Φ Φ Φ Φ Φ λ Φ λ Φ λ Φ λ Φ コード 近似 関数 ₀ ₀ ₀ ₀ コード 近似 結果 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ λ Φ Φ ₀ Φ λ Φ ₀ コード 関数 Δ α Δ ≤α ₀ ₀ ₀ ∇ ₀ ∇ コード 結果 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ λ Φ Φ ₀ Φ λ Φ ₀ コード 関数 ₀ λ₀ ₀ ₀ λ λ λ₀ λ α β λ λ₀ λ λ ∇ λ λ λ λ ₀ ∇ λ λ λ α β λ λ λ コード 結果 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ λ₀ Φ Φ ₀ Φ λ λ Φ λ λ λ ₀ λ₀ コード 変分推論 関数 ∇ ∇ μ λ ∇μ λ μ ∇λ λ μ ∇μ ∇λ ∇ μ λ μ √λ ∇ λ μ λ ∇μ λ μ ∇λ λ λ λ ∇μ ∇λ λ ϵ ϵ ∇ λ μ λ μ √λ λ ϵ λ λ ϵ コード 変分推論 結果 ₀ ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ Φ Φ ₀ Φ ϵ λ λ ϵ λ λ λλ λ λ ϵ 参考文献 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 変分オートエンコーダ修正版 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 変分オートエンコーダ 最終更新 記事の内容 変分オートエンコーダの概要 問題設定 モデルと方針 近似分布の導入との導出 数値実験 実験内容 実験結果 コード 以前書いた 変分オートエンコーダを修正します 修正点は以下の点です まず 版ではない通常の変分オートエンコーダの説明に差し替えます 点目は 実験をクラスタリングの実験からのデータを用いたものに変更します クラスタリングの実験は 学習しなくても初期パラメータでクラスタリングが達成できてしまう例でした は基本的に連続なので 何となく色分けができるのは自明でした 変分オートエンコーダの概要 問題設定 画像などの高次元のデータは 高次元の空間の点として表されます 一方 手書き文字のデータを覗いてみると 画像の端っこの方は黒値としては 中央付近には白い部分値としてはが広がっています 従って 画像データの集合は高次元の空間において遍在しているというよりは 等式や不等式によって制約された低次元の空間に偏在していると考えられます 各データ点に対してこの低次元の表現を抽出できれば データの背後の構造を探ったり 新たな画像を生成したりできます 変分オートエンコーダ は この低次元の表現を抽出するためのモデルと学習方法を提供してくれるもので 深層生成モデルの一種です モデルと方針 手元に高次元のデータ があるとします このデータに対応する低次元の表現 を推定するのが目的です 次のような生成過程を考えます 上のモデルにおいて 低次元から高次元への変換は複雑と考えられるため 以下の によって表現します 重みパラメータをとし 隠れ層は層とします をデータから定め の事後分布 を求めることが目標です しかし の事後分布への寄与は複雑であるため 解析的に計算するのは困難です そこで 変分推論法を用いて事後分布を近似します 近似分布の導入との導出 の事後分布を以下のように近似します は近似分布のパラメータです ただし 各は正規分布 の確率密度関数とします ただし 正規分布のパラメータは平均ベクトルと共分散行列のつであり それがデータサイズ分あると考えると その全てを調整するのは大変ですね そこで これらの近似分布のパラメータをデータから回帰します 高次元のデータから低次元のパラメータを得る変換も複雑であると想定し 以下のような を用います 重みパラメータはとし 隠れ層は層とします 結局求めたいのはつの の重みパラメータとであり 以下のような最適化問題に帰着します を計算すると 以下のようになります はの次元です 実際には こののミニバッチ版を用います あとは 確率的変分推論 を組み合わせると推論ができます 数値実験 実験内容 の手書き文字画像を用いて実験します 書いたプログラムが遅すぎたので ラベルがとの画像のうち 最初の枚分だけを用いて学習しました 画像をベクトル化するとデータの次元はです ここから 次元の表現を抽出することにします ミニバッチのサイズはとし 変分推論アルゴリズム全体の反復回数は回としました また の活性化関数はとし 隠れ層のユニット数はです なお スレッド並列で計算しました 実験結果 以下に結果を示します まず パラメータ学習前のの様子です 各点が 高次元の画像の低次元の表現に相当します 黒い点はラベルがの画像 白い点はラベルがの画像です は連続関数なので 高次元の空間で近くにある点同士は 低次元空間でも近くにあります よって初期パラメータでもある程度色分けがなされます コードの実行結果 パラメータ学習後の様子を下図に示します 白い点は一直線上に並んでいるように見えます 黒い点は点に集中しているように見えます 例えば 白い点が並んでいる直線常に新たに点をとってで写せば 新たな画像が生成できます ただし実際には低次元過ぎて情報がほとんど削ぎ落とされ 意味のある画像は生成できません もう少しの次元を大きくすればうまくはず 黒と白が重なっている部分は とのキメラみたいな画像が誕生するかもしれません コードの実行結果 下図はの変化をプロットしたものです 計算は結構時間がかかるので反復ごとに記録しています コードの実行結果 上の図では がに近づいているように見えますが 実際にはかなり差があります 下図は の絶対値を対数スケールでプロットしたものです コードの実行結果 コード コード 初期化 コード データの読み込み コード の定義 ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₂ ₃ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₃ ₂₂ ₃ コード 関数の定義 Φ Φ Φ Ψ η Ψ η Ψ ϵ η Ψ η Ψ ϵ Φ Φ η ϵ Φ Ψ ϵ η Ψ Φ η Ψ η Ψ η ϵ Φ Ψ η ϵ Φ Ψ η Ψ η ϵ Φ Ψ η ϵ Φ Ψ η Ψ η ∇ η ϵ Φ Ψ η ϵ Φ Ψ ∇ η ϵ Φ Ψ ∇ ∇ ∇ η ϵ Φ Ψ ∇ ∇η η ϵ Φ Ψ ϵ Φ Ψ η ∇η η ϵ Φ Ψ ∇η η ∇η ∇η η ϵ Φ Ψ ∇η α η Φ Ψ ₀ η₀ ₀ η η₀ Δ δ η η δ η δ η ϵ ϵ Δ ϵ ∇ η ϵ Φ Ψ η ∇η η ϵ Φ Ψ η η η η α η α η η Δ ϵ Δ η ϵ Φ Ψ η コード 実行 Φ Φ Φ Φ₂ Φ₃ Φ₂ Φ₃ Φ Φ Φ₂ Φ₃ Φ₂ Φ₃ Φ ₀ Φ ₀ Ψ Ψ Ψ Ψ₂ Ψ₃ Ψ₂ Ψ₃ Ψ Ψ Ψ₂ Ψ₃ Ψ₂ Ψ₃ Ψ η₀ Ψ η η₀ ηη ΦΦ ΨΨ ₀₀ η₀η₀ α η α コード の表示 コード の絶対値の対数スケール表示 コード 初期パラメータでの潜在変数の分布 Ψ η₀ Ψ ₁ ₂ コード 学習後のパラメータでの潜在変数の分布 Ψ η Ψ ₁ ₂ 参考文献 – 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 修正版 最終更新 記事の内容 問題設定とモデル 問題設定 モデル の学習 通常の の学習 の学習 近似 の学習 の学習 の学習 変分推論法 プログラム 以前書いた記事を色々修正します 主にモデルとプログラムを修正しました の様々な学習方法を比較します 問題設定とモデル この節では タスクとして分類問題を導入し そのためのモデルを導入します モデルは通常の と その版を考えます 問題設定 次のような分類問題を考えます 画像のようにいくつかの点とそのラベルが与えられているとします 点個がつのデータであり 対応するラベルが赤丸と青バツです 全部で点あります このつのクラスの間を仕切る境界の推定が目標です 要するに二値分類です コードの実行結果 記号を導入します 平面上の各点に対して 対応するラベルデータ が与えられているとします サンプルサイズはとして データを次のようにまとめておきます 今の場合 です 赤い点のラベルをとし 青いバツのラベルをとします モデル モデルを導入します 今回は以下のつのモデルを考えます 中間層が層の通常の 中間層が層の 赤い点に分類される確率をモデル化します まず 通常の は 以下のように設定します ここで はシグモイド関数 中間層の幅をとし はパラメータをまとめたベクトルとします この の出力を赤い点に分類される確率と解釈します 次に版の をモデル化します の重みパラメータに事前分布を設定するとき といいます 先程の モデルからの連想から 次のようなモデルを考えます 事前分布として 正規分布を仮定しておきます の学習 以下 次のような学習方法を順に試していきます 通常の の学習 近似 法 確率的変分推論法 通常の の学習 まずは通常の の学習です コスト関数を二乗誤差とします バッチサイズは 訓練反復回数は ステップサイズは とします 結果は以下の通りです 性能は結構良さそうですね コードの実行結果 の学習 近似 ここからが です まずは近似による学習です 近似では 事後分布を次のように正規分布で近似します は推定量 を対数事後分布の行列とします とします 展開から導出できます ので無理やり最大化して推定量を求めました 結果は以下の通りです 正規分布の割にうまくいってますね コードの実行結果 の学習 次にです 法の反復回数は ステップサイズは としました サンプル数は 最初のサンプルは期間として除去しました としました 以下に予測結果を示します それっぽく分類できてますね コードの実行結果 の学習 次に と を組み合わせた方法です はで学習し は で学習します の事前分布として以下のガンマ分布を仮定します このとき 条件付き事後分布は以下のようになります サンプル数や期間 法の設定などは先ほどと同じです 以下に予測結果を示します 予測はうまくいってそうです コードの実行結果 の学習 変分推論法 次は変分推論法です こちらで解説したものと同じです 訓練回数はとしました 直前の反復でのとの差が を下回った時点で反復を終了します 更新幅は としました コードの実行結果 以下の図は を近似計算したものです は大きくなっていますが 色分けはうまくいきませんでした コードの実行結果 コード コード 初期化 コード 種々の関数定義 ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₂ ₃ ₃ ₀ ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₀ ₂ ₃ ₂ ₃ σξ ξ ₂ ₃ ₂ ₃ σ ₃σ ₂₂ ₃ コード データの作成 コード 通常の 関数定義 α ₀ ₀ ₀ ∇ α∇ コード 通常の の訓練 ₀ ₀₀ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₀ α α ₀ コード 共通の関数 λ λ λ λ λ λ コード 近似 関数定義 ₀ ₀ ₀ λ ₀ コード 近似 実行 ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ ₀ λ λλ ₀ コード 関数定義 Δ α Δ ≤α ₀ ₀ ₀ ∇ ₀ ∇ コード 実行 ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ ₀ λ λλ ₀ コード 関数定義 ₀ λ α β λ ₀ ₀ λ λ λ λ λ ∇ λ λ λ λ ₀ ∇ λ λ λ α β λ λ λ コード 実行 ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ ₀ λ λλ α β λ ₀ コード 変分推論 関数定義 ∇θθ ∇θ θ λ θ ∇θ ∇θ θ λθ ∇θ θ λθ ∇θ θ λ λθ λ θ θ λ θ θ θ α λ θ θ λ θ θ θ α∇θ θ λ θ λ θ θ コード 変分推論 実行 ₂ ₃ ₂ ₃ ₀ ₂ ₃ ₂ ₃ ₀ ₀ ₀ λ λλ α θ α θ コード の変化 参考文献 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 変分推論法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 変分推論法修正版 最終更新 記事の内容 概要 問題設定 基本的なアイデア 平均場近似 平均場近似の考え方 例 正規分布の推論 確率的変分推論法 確率的変分推論の考え方 例 の分類問題 コード 以前書いた記事の修正版です モデルやプログラムを修正しました 変分推論を具体例を用いて説明します 最も有名な平均場近似を用いた手法と ミニバッチ学習に対応した確率的変分推論法を紹介します 確率的変分推論法は 元々 で提案された手法ですが ここではもっと広い意味で用いています 原論文では確率的最適化と自然勾配の考え方を用いていますが ここでは「確率的最適化をベースとした変分推論法」程度の意味で用いています 概要 問題設定 変分推論は 複雑な事後分布を近似する方法です とは違い 最適化がベースです まず どういう状況で用いる手法なのか 問題設定を確認しておきます 手元にデータ があるとします このデータを発生させた分布を推定することが目的です モデルをでモデル化したとします ここで はパラメータです このパラメータの事前分布をとします すると事後分布が計算できます この事後分布の平均を計算したり モデルを事後分布で重みづけて予測分布を計算するには事後分布が複雑すぎるとします 解析的に扱えない場合 や変分推論法が用いられます 次に 変分推論法の基本的なアイデアを述べます 基本的なアイデア 変分推論法では 事後分布を近似する分布を構成します 目標は 次のような分布を 予め定めた分布族から見つけることです ここで 次の点が問題になります 近似分布は事後分布にどういう意味で近いのか 分布族はどのように設定するか まず点目 分布間の近さは ダイバージェンスで測るのが自然です 近似分布と事後分布の間の ダイバージェンスが最小になるように近似分布を定めます もう少し詳しく見てみましょう 次のような数量を定めます すると と の間の ダイバージェンスは 次のように書けます ダイバージェンスが非負であることから 次式が得られます が周辺尤度（エビデンス）の下界であることから この量を と呼びます 当面の間の目標は ダイバージェンスの最小化ですが これはの最大化と等価です なお の符号反転は変分自由エネルギーと呼ばれます 次に点目です 分布族の決め方はいくつかあります 最も有名な方法が平均場近似です 平均場近似では 近似分布を具体的には指定せず 事後分布が都合よく分解できると仮定します 分解できるという仮定のみでも 事後分布はいい感じに求まります 他には 予め分布を指定する方法があります 例えば予め正規分布で近似できると仮定して パラメータを決めてやります 以下 このつのアイデアを詳しく掘り下げていきます 平均場近似 平均場近似の考え方 平均場近似では 近似分布が属する分布族を次のように定めます ある確率（密度）関数 が存在して このような分布族から持ってきた近似分布について 各 に対して は次のように書けます ここで は正規化定数で 上式の期待値は次のようにとります つの分布が一致するときにダイバージェンスが最小になることから 各 に対して因子が定まっているときに と因子を更新することで が最大になります 適当な初期分布から初めて更新を繰り返していけば がどこかで頭打ちになるはずです このとき近似分布は事後分布に十分近いと期待できます 例 正規分布の推論 ここでは例として 正規分布の平均と精度の事後分布を推定します モデルが正規分布で パラメータが平均パラメータと精度パラメータにあたります 次のような生成過程を考えます は定数です このとき事後分布は次のようになります 例えばこの分布の平均を求めるのは困難です ということで変分近似を行います 次のように分解されるとします 先ほど導出した期待値計算を含む分布を導出すると 以下のようになります の近似分布は正規分布 の近似分布はガンマ分布であることが分かります それぞれの分布を次のようにおきます すると 次のように書けます これを更新式として 次のようなアルゴリズムが得られます 実際には が上記の更新で変化しないので ループの外に出して実装します 正規分布に対する変分推論アルゴリズム ちなみに の値は以下のようになります 少し長いです はガンマ関数 はディガンマ関数です 以下に実験結果を示します 真の分布は混合正規分布 としました この分布からデータを点発生させました とします また 初期値は とします 左下図の等高線は 近似事後分布を表します また によって真の事後分布からサンプルし プロットしました緑点 実際の事後分布と近似事後分布は一致しているように見えます また 右下図は の変化の様子を示しました 回目の更新で収束しています コードの実行結果 近似事後分布からサンプルを発生させて 予測分布を計算しました橙線 赤色が真の分布です また で得た事後分布からのサンプルを用いて 真の予測分布を計算しました青色 予測分布同士はほぼ一致しています コードの実行結果 概要 確率的変分推論の考え方 事後分布の近似方法として 予め分布を指定する方法が考えられます 例えば正規分布などの簡単な分布を仮定して パラメータを調節して近似精度向上を目指します この方法でも 近似分布と真の事後分布のダイバージェンスを最小化します 近似分布をと表示しておきます パラメータを調節して ダイバージェンスの最小化 もしくはそれと等価なの最大化を目指します を具体的に書き出すと 以下のようになります これを 確率的勾配降下法と同じ要領で 次のように近似します これを用いて 最急上昇法で次のように最大化していきます アルゴリズムとしてまとめておきます 確率的変分推論アルゴリズム 例 次のような分類問題を考えます 画像のようにいくつかの点とそのラベルが与えられているとします 点個がつのデータであり 対応するラベルが赤丸と青バツです 全部で点あります このつのクラスの間を仕切る境界の推定が目標です 要するに二値分類です コードの実行結果 記号を導入します 平面上の各点に対して 対応するラベルデータ が与えられているとします サンプルサイズはとして データを次のようにまとめておきます 今の場合 です 赤い点のラベルをとし 青いバツのラベルをとします モデルを導入します 今回は を考えます 赤い点に分類される確率をモデル化します まず 次の を定義します ここで はシグモイド関数 中間層の幅をとし はパラメータをまとめたベクトルとします この を用いて 次のようなモデルを仮定します 事前分布として 正規分布を仮定しておきます 重みパラメータの事後分布を求めたいのですが が絡むことでモデルへの寄与が複雑になります このまま解析的に扱うのは難しそうなので 変分推論法を用います ここでは 次のように近似分布の族を定めます ここで 近似分布のパラメータを とおきました 以上の仮定の下 は以下のように計算できます データ点 を全データからランダムにサンプルして を次のように近似します この近似値を最大化することで 近似分布のパラメータを定めます の勾配を求めます 各 に対して 次式が成り立ちます は近似分布からのサンプルです 以下に実験結果を示します 反復回数をとしました また ステップサイズは としました 直前の反復でのとの差が を下回った時点で反復を終了します 結果は以下の通りです 予測確率が 付近です 境界は得られませんでした コードの実行結果 の変化を下図に示します 思惑通り 増加していますね なお の解析的に計算できない積分の項はモンテカルロ法で近似しています コードの実行結果 コード コード 初期化 コード 平均場近似の関数定義 β μ λ α β λ αβ α α α βα α β α μμλβ μλ β βαβ β μ₀ λ₀ β₀ μ μ₀ λ λ₀ α β β₀ β μ λ α β λ αβ μ αλβ β β μ μ λ β μ λ α β μ λ α β μ λ α β μ μ √λ λ α β μ λ μ λ μ μ √λ β μ₀ λ₀ μ λ μ μ₀ λ λ₀ μ λ λ √λ λ β μ μ λ コード 平均場近似の実行 μ₁ μ₂ σ₁ σ₂ μ₁ σ₁ μ₂ σ₂ β ββ μ₀ λ₀ β₀β μ λ α β μμ λλ αα ββ μ λ μ λ α β μ √λ μ α β λ μ₀ λ₀ μ λ μμ λλ μ λ μ λ μ λ μ λ コード 平均場近似の予測分布 μ λ μμ λλ コード 確率的変分推論の関数定義 ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₂ ₃ ₃ ₀ ₀ ₂ ₀ ₃ ₀ ₂ ₀ ₃ ₀ ₂ ₃ ₂ ₃ σξ ξ ₂ ₃ ₂ ₃ σ ₃σ ₂₂ ₃ α ₀ ₀ ₀ ∇ α∇ λ λ λ λ λ λ ∇θθ ∇θ θ λ θ ∇θ ∇θ θ λθ ∇θ θ λθ ∇θ θ λ λθ λ θ θ λ θ θ θ α λ θ θ λ θ θ θ α∇θ θ λ θ λ θ θ コード データ作成 ₀ ₀₀ コード 通常の の訓練 ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₀ α α ₀ コード 確率的変分推論による予測分布 ₂ ₃ ₂ ₃ ₂ ₃ ₂ ₃ ₀ ₀ λ λλ α θ α θ コード の変化 参考文献 ビショップ パターン認識と機械学習 丸善出版 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 最終更新 記事の内容 概要 モデルの説明 データの生成過程 実験 データを作ってみる 推論 更新式の導出 実験 推論してみる 推論 変分推論 更新式の導出 実験 推論してみる コード 久しぶりの新記事 メモも兼ねて について簡単にまとめておきます 概要 モデルの説明 以下 は トピックモデルの一種で 文書のトピック解析に用いられるモデルです 単語データの生成過程が確率モデルで記述されます トピックとは 手元にある文書の大まかな意味・話題のようなものです 例えば手元にあるツイートの集合がおおよそ数学や経済に関するものであると分かれば便利でしょう また 手元にあるレビューの集合がある商品に関する否定的意見からなるものであれば 意思決定に役立つでしょう 以下 記号を整理しながらモデルの説明をします 今 手元に全部で個の文書があるとします つの文書は例えば つのツイートやつのレビューなどです 各文書は予め単語で分けてあり 全種類あるとします 単語にはからまでの番号をつけておき 以降 単語とこの番号を同一視します 番目の文書の番目の単語をで表します また 番目の文書の単語数をで表します 一般に 単語には出現しやすい特定の文脈があります 例えば 確率や統計などの単語は数学や工学などのトピックに現れやすく 芸能やスポーツなどのトピックには現れにくいはずです そこで 各単語に対してどのトピックに属するのかを表現する変数を導入します トピック数は予め固定した上で 単語に対するトピックを表す変数をで表します はからまでの整数値をとります 以下 トピックとトピックの番号を同一視します 次に 単語とトピックの出やすさを確率で表現します 単語の出やすさはトピックに大きく依存します そこで 番目のトピックにおける単語の出現確率をベクトルに格納します 一方 トピックの出やすさは文書に大きく依存します そこで番目の文書におけるトピックの出現確率をベクトルに格納します 以上の考察を踏まえて 確率分布を用いてデータの生成過程を次のようにモデル化します このモデルでは とトピック数を予め与えます また 文書数 文書長 単語種類数 単語はデータから与えられます 各トピック に対して 単語の出現確率が分布に従って得られる 各文書 に対して トピックの出現確率が分布に従って得られる 各文書 の 番目の単語に対応するトピックが確率分布に従って得られる 各文書 の 番目の単語が確率分布に従って得られる 記号をいくつか導入しておきます 単語とトピックを次のようにまとめておきます また 確率変数を以下のようにまとめておきます をモデルとした推論では から を推論するのが目標です ちなみに同時分布を書き下すと以下のようになります 複雑な形なので近似推論法を使うのが自然です データの生成過程 先ほどのモデルをアルゴリズムっぽく書いておきます 実際の分析では トピック数 事前分布のパラメータ は自分で設定します 一方 単語データおよび 文書数 文書長 単語種類数はデータから分かります また 具体的なトピックやトピックの順番は指定せず トピック数のみを指定します データの生成過程は次のように記述できます のデータ生成 実験 データを作ってみる モデルから実際に人工的にデータを生成してみます 文章数 単語種類数 トピック数とし 文書長 を分布から発生させます また とします 各文書でのトピック出現確率の成分を棒グラフで示します は全部で個あります 下図に のみを抜き出しました 例えば 番目の文書には番目のトピックが現れやすいことが分かります コードの実行結果 下図は 各トピックの単語出現確率を棒グラフで示したものです コードの実行結果 以下の節では このデータを用いて推論を行います 推論方法として と変分推論を用います 推論 更新式の導出 まずは を用いた推論です 条件付き事後分布を求めると次のようになります アルゴリズムにまとめると以下のようになります に対する 実験 推論してみる 上のアルゴリズムを用いて実験します データは前節で生成したものを用い モデルもです データから文書数や文書長 単語の種類数は分かります 自分で設定するのはトピック数とパラメータ です トピック数はとし としました サンプル数はとし そのうちサンプルを初期値に依存するものとして除去しました 下図にの値を棒グラフで示します トピック番号の並びは関係ないので 真値とは棒グラフの様子も異なります コードの実行結果 下図にの値を棒グラフで示します コードの実行結果 推論 変分推論 更新式の導出 変分推論を用います ここでは平均場近似を用います 次の分布で事後分布を近似します 平均場近似の近似分布の式から 次式が得られます 以下にアルゴリズムを示します 実装方法は様々あると思います 以下のアルゴリズムでは のように 更新により足される部分をを用いて表しています 反復ごとにこれを計算しなおします ただし最初は乱数でランダムに初期化します に対する変分推論 実験 推論してみる の場合と設定は同じです 反復回数をとしました 以下に推定したを棒グラフで示します こちらもトピックの順番は関係ないのでまたもや様子は異なります コードの実行結果 下図はの推定結果です コードの実行結果 コード コード 初期化 コード データ生成 α β Θ θ Φ ϕ Φ β Θ α Θ Φ Θ Φ コード データ生成 α β Θ Φ α β コード トピック出現確率 θ θ θ₁₀ θ₂₀ θ₃₀ θ₄₀ θ₅₀ θ₆₀ θ₇₀ θ₈₀ θ₉₀ θ₁₀₀ Θ コード 単語出現確率 ϕ ϕ ϕ₁ ϕ₂ ϕ₃ ϕ₄ ϕ₅ ϕ₆ ϕ₇ ϕ₈ ϕ₉ ϕ₁₀ Φ コード α β Θ Φ Θ α Φ β Θ Φ α β Θ Φ α β Φ Θ Θ α Φ β Θ Φ コード 実行 α β αα ββ Θ Φ Θ Θ Φ Φ コード トピック出現確率 θ θ θ₁₀ θ₂₀ θ₃₀ θ₄₀ θ₅₀ θ₆₀ θ₇₀ θ₈₀ θ₉₀ θ₁₀₀ Θ コード 単語出現確率 ϕ ϕ ϕ₁ ϕ₂ ϕ₃ ϕ₄ ϕ₅ ϕ₆ ϕ₇ ϕ₈ ϕ₉ ϕ₁₀ Φ コード 変分推論 α β α β α β α β θα α ϕβ β Θα Φβ α β α β α β α α β β θ ϕ α α θ β β ϕ θ ϕ α β α α θ β β ϕ θ ϕ α β コード 変分推論の実行 α β αα ββ α β Θ α Φ β コード トピック出現確率 θ θ θ₁₀ θ₂₀ θ₃₀ θ₄₀ θ₅₀ θ₆₀ θ₇₀ θ₈₀ θ₉₀ θ₁₀₀ Θ コード 単語出現確率 ϕ ϕ ϕ₁ ϕ₂ ϕ₃ ϕ₄ ϕ₅ ϕ₆ ϕ₇ ϕ₈ ϕ₉ ϕ₁₀ Φ 参考文献 佐藤一誠 トピックモデルによる統計的潜在意味解析 コロナ社 岩田具治 トピックモデル 講談社 記事一覧に戻る 
 回帰問題の定式化 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 回帰問題の定式化 最終更新 記事の内容 定式化 問題を整理する 推測方法 実験 コード 過程を勉強するにあたって 回帰問題を整理することにしました 間違っていたら教えていただけると幸いです 定式化 問題を整理する 手元にあるデータ に対して 回帰問題を以下のように推測問題として定式化します の次元を の次元をとします は真の分布 からのサンプルとします または 入力から出力への対応をデータから推測します モデル を用いて 何らかの方法で計算した予測分布によって 真の分布を推測します モデルは以下のように書けるとします ただし は適当な分布の確率密度関数とします また 以下の予測分布の平均によって入力から出力への対応を推測し 回帰関数と呼びます 推測方法 推測方法として 最尤推測 推測 平均プラグイン推測 推測を考えます 最尤推測 最尤推測では 次式で定義される最尤推定量をモデルに代入して予測分布とします 特に モデル平均が ならば です さらに が平均がゼロベクトルの正規分布ならば 次式が成り立ちます これは最小二乗法です 推測 推測では 次式で定義される推定量をモデルに代入して予測分布とします 特に モデル平均が ならば です さらに とも事前分布が平均ゼロベクトルの正規分布ならば あるが存在して 次式が成り立ちます これは回帰です 平均プラグイン推測 平均プラグイン推測では 事後平均をモデルに代入して予測分布とします 特に モデル平均が ならば です 推測 推測では 次式で予測分布を定めます 特に モデル平均が ならば 回帰関数は以下のようになります 実験 とします を平均をゼロベクトル 共分散行列をとする正規分布とします 関数列を次式で定めます このとき を次のように定めます 事前分布は平均がゼロベクトル 精度がの正規分布とします また を計画行列とします このとき 各推定値は次式を求めます とします 推測の回帰関数は 以下の予測平均です 実はこの回帰関数は 推測と平均プラグイン推測の回帰関数と一致します 次のように データ点が点あるとします コードの実行結果 つの手法を実行した結果を下図に示します 推測 平均プラグイン推測 推測は一致しています コードの実行結果 コード コード 初期化 コード データ作成 コード 関数定義 ϕ μ σ μσσ ϕ μ σ ϕ μ σ ϕ ϕ コード 様々な推測 σ λ μ σ σσ λλ μμ σσ Φ ΦΦ Φ Φ Φ Φ ΦΦΦ α σλ ΦΦαΦ ΦΦσσλΦσσ μ σ λ ΦΦϕ ϕ σλΦ ΦΦϕ ϕ σλϕ ϕ ϕ μ 参考文献 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 記事一覧に戻る 
 期待値伝播法 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 期待値伝播法 最終更新 記事の内容 概要 アルゴリズムの概要 アルゴリズム導出の手順 実験 問題設定 実験結果 コード 期待値伝播法 てこずったので記録として残しておきます 概要 アルゴリズムの概要 期待値伝播法 は 事後分布を近似する近似推論法です 変分推論法と少し似ています 事後分布の積の形を近似分布で再現して ダイバージェンスの意味で近づけます 今回使ってみた感想としては ちょっと不便かなって感じです 以下に メリットとデメリットを書いておきます 期待値伝播法のメリットとデメリット個人の感想 メリット 実行時間は早い デメリット 事後分布と近似分布の間のダイバージェンスが最小になるという保証はない 更新式の導出は面倒 適用できるモデルは多くはなさそう アルゴリズムの概要を述べます モデル 事前分布 データに対して 以下の事後分布を考えます この事後分布を近似する方法を考えます 以下のような形の近似分布は自然な選択です 各因子は予め選択した分布の確率密度関数とします 期待値伝播法では この因子を反復的に更新していきます アルゴリズムの大まかな手順は以下の通りです 期待値伝播法の概要 更新したい因子を除いた 残りの因子だけを取り出す 実際には 両辺のパラメータを比較して更新式を導出する モデルの情報を取り込んだ事後分布の代わりの分布を用意する の分布を特定できれば良いが モーメントが分かれば十分なケースもある 近似分布を用意した分布にダイバージェンスの意味で近づける 近似分布が指数型分布族の場合には この後述べるモーメントマッチングを用いて更新式を導出する 因子を更新する 実際には 両辺のパラメータを比較して更新式を導出する 以下にアルゴリズムを示します 実際には近似分布のパラメータだけ調節すれば計算できます 期待値伝播法 近似分布が指数型分布族の場合には ダイバージェンス最小化の部分は解析的に更新式が導出できます とするとき 以下の最適化問題を解くことになります これをの未定乗数法で解くと 次式を満たすようにパラメータをとることで最小値が達成できると期待できます が次元正規分布ならば とできるので の平均と分散をのものに合わせればです 実験 問題設定 実験を行います 次のような設定を考えます 以下の混合正規分布から データを発生させます モデルは以下の混合正規分布とします を推定します の事前分布として 平均が 分散がの正規分布を用います 近似分布の各因子を正規分布とします 各因子の平均と分散パラメータを反復的に調節します このとき は正規分布 は混合正規分布になります また は 事前分布をそのまま利用します は無視して学習を行います ヒストグラムと真の分布の様子を下図に示します とします コードの実行結果 具体的な更新式は コードをご覧ください 導出は結構面倒です 実験結果 実験結果を示します 反復ほど計算しました 近似事後分布からのサンプルをサンプルほど用いて予測分布を計算しました 下図の赤線が真の分布 青線が推測結果です 割と近くなっていますね 学習はうまくいってそうです コードの実行結果 コード コード 初期化 コード データの生成 μ σ μ σ コード 関数定義 μ σ μ σ μ σ μ σ μ σ μ σ μ σ μ σ μ σ μ σ コード 学習 μμ σσ θ μ σ θ μ σ θ θ θ θ 参考文献 記事一覧に戻る 
 によるテキストデータの前処理 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 によるテキストデータの前処理 最終更新 記事の内容 ドキュメントの作成 前処理 テキストのクリーニング ストップワードの除去 テキストの正規化 単語分割 によるテキストデータの前処理をまとめました を試しに使用 まだ使いこなせていないので 機会があればまたまとめ直したいです ドキュメントの作成 とりあえず以下のツールを用います 初期化 にはいくつかの構造体が定義されています そのうちのつがファイルドキュメント ただのファイルですが 様々なフィールドが定義されています ファイルドキュメントの作成 実行結果 他にもというものもあります これは文字列です 文字列ドキュメントの作成 実行結果 これらのドキュメントからテキストを取り出すには次のようにします ドキュメントのテキスト 実行結果 フィールドも書き換えてみます 著者の変更 実行結果 前処理 いくつかの前処理を試します テキストのクリーニング を用いると 文字列中の様々な要素を除去できます 例えばを指定すれば のタグを除去できます タグの除去 実行結果 ストップワードの除去 自然言語処理において処理の対象外となるストップワードを除去してみます これもで簡単にできます ストップワードの除去 実行結果 処理内容によっては削りすぎかもしれませんね テキストの正規化 同じ単語でも大文字や小文字が混じっていると厄介です 小文字に揃えるには以下のようにします 小文字に統一 実行結果 また 単数形や複数形などの揺れも厄介です 単数形に統一するにはを用います 文字の統一 実行結果 がになるのはちょっと も変な感じになってしまいました 単語分割 次は単語分割です を使えば一発です トークン化 実行結果 日本語だとうまくいきません トークン化 ああロミオどうしてあなたはロミオなの 実行結果 ああロミオどうしてあなたはロミオなの こんな時は を変えてやります はいくつか定義されています 日本語に関しては を使うとうまくいくようです トークン化 ああロミオどうしてあなたはロミオなの 実行結果 ああ ロミオ どう して あ なた は ロミオ な の デフォルトの設定に戻しておきます 元に戻す ドキュメントをいくつか寄せ集めてコーパスを作成できます 前処理も先ほど同様できます に複数処理を命じる時は パイプライン処理を施します コーパスの作成 日本の思想 これを踏まえて テキストをベクトル または行列で表現します では テキスト中に現れた回数を各単語に関して記録します 横が単語 縦がドキュメントの行列を作成します 横の単語の並びは フィールドから確認できます 実行結果 ⋅ ⋅ は 関数を使えばです 実行結果 ⋅ ⋅ 参考文献 の公式ドキュメント 中山光樹 機械学習・深層学習による自然言語処理入門 とを使った実践プログラミング マイナビ出版 記事一覧に戻る 
 言語の記憶性 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 言語の記憶性 最終更新 記事の内容 分布の記憶性 指数分布 分布 擬似的な言語データの作成 ネットワーク ネットワーク上のランダムウォーク 言語の記憶性 コード 言語に関する本 が面白かったので 自分でも実験してみました 言語の記憶性を数学的に検証します 実データを処理するのは面倒なので 本来の言語に近いモデルを用います 分布の記憶性 生存時間解析などで用いられるつの分布 指数分布と分布を導入します 指数分布 指数分布 指数分布の確率密度関数は次式である は確率測度とします 指数分布に従う確率変数について 次の条件付き確率を調べます 例えば が故障までにかかる時間だとすれば まで故障せず さらに時間だけ持ち堪える確率は に依存しません この 過去の履歴に依らない性質を無記憶性と呼びます この性質から 指数分布はランダムな現象のモデル化に適しているとされます 逆に 右辺の超過確率を計算して指数関数の形になれば ランダムな現象だと判定できそうです 分布 以下の分布は 指数分布とは異なり 無記憶性を示しません もちろんパラメータの値に依りますが 分布 分布 の確率密度関数は次式である 擬似的な言語データの作成 ここから自然言語の話に移ります 実データを処理するのは面倒なので 本来の言語に近いデータを人工的に作ります によると ネットワーク上のランダムウォークから生成されるデータが自然言語に割と近いらしいです まずは ネットワークの説明から入ります ネットワーク ネットワーク以下 ネットワークは 少数のノードが多くのリンクを持ち 多くのノードが少数のリンクを持つ複雑ネットワークです をモデル化するのに役立ちます 自然言語の場合 少数の単語のみが頻出することが分かっていますの法則 言語のモデル化にネットワークは適しているでしょう ネットワークの作り方を説明します まず 最初にノードがいくつか存在するとします これらのノードに新規のノードを繋げます 新規のノードからは 本のリンクが出ており 既存の どのノードに繋ぐかは確率的に決めます 既に持っているリンク数に比例する確率で繋げるノードを選択します この操作を繰り返します ネットワーク作成の様子を アニメーションで示します の場合をノード数がに達するまで反復しました 最初に出現したノードほど 多くのリンクを持っています コードの実行結果 ネットワーク上のランダムウォーク 先ほど作成したネットワーク上でランダムウォークさせます 言語の例で言うと 各ノードは単語に対応します 歩く主体がノードに達するごとに そのノードに対応する単語が発生すると考えます ノードに移動する確率は 移動先のリンク数に比例する確率で選択します ここでは 回ほど歩かせます つまり 単語からなる文書が作成されるイメージです アニメーションを以下に示します 星マークが歩く主体です コードの実行結果 言語の記憶性 以下 ネットワーク上のランダムウォークから発生させた人工データを本物の単語データと思って話を進めます に従って 万ノードのネットワーク上で万回ランダムウォークさせます このデータを用いて 文書中の単語の出現がランダムと言えるかどうかを検証します 番目のノードに対応する単語以下 単語は頻出と期待できます この単語に注目して解析します まず 単語の出現具合を数量化します 単語の出現間隔は 出現具合の指標として つの自然な選択です この出現間隔の分布を調べてみましょう データがランダムに発生しているかどうかは 指数分布に従うかどうかで峻別できるのでした 単語の出現間隔に対して 間隔の頻度から確率を計算し 超過確率を計算してランダム性を調べます 計算結果を下図にプロットしました 横軸は出現間隔の長さ 縦軸はその出現間隔よりも長い間隔で単語が現れる確率を表します 擬似的なデータが青線です オレンジの線は 単語列をシャッフルしたものです シャッフルした列は単語の出現間隔がランダムであると期待できます コードの実行結果 オレンジのシャッフル列はほぼ直線です 縦軸は対数スケールですから おおよそ指数的に減衰する形です 超過確率が指数関数となるので シャッフル列の出現間隔の分布は指数分布と考えられます 一方 青の単語列は 指数分布からの乖離を示します 実はこの青のカーブは分布であることが知られています ここまでの話をまとめれば シャッフル列は無記憶性を示し 単語列は記憶を保持します 我々の用いる自然言語には このように記憶が関わっており 偶然性のみでは説明できません 系列の過去の履歴にも依存し 長い間隔を隔てて単語が再び出現する可能性が十分あります 今回は擬似的なデータを用いましたが 実際の言語データでも成り立つはずです未確認 コード コード 初期化 コード 関数定義 コード ネットワークの作成 θ π π θ θ コード ランダムウォーク θ π π θ θ コード データ作成 コード 関数定義 Ψ Ψ コード 超過確率 参考文献 久保川達也 現代数理統計学の基礎 共立出版 田中久美子 言語とフラクタル 使用の集積の中にある偶然と必然 東京大学出版会 記事一覧に戻る 
 過程入門 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 過程入門 最終更新 記事の内容 の概要 動機付け とは この記事の構成 過程の導入 モデル 過程の定義 アルゴリズム 棒折り過程 アルゴリズム 中華料理店過程 実験 の推定 過程混合モデル 問題設定 実験 変分推論法でクラスタリング コード あけましておめでとうございます 今年もよろしくお願い申し上げます 最近 論文を読む過程で必要になったのでまとめておきます 特に過程に関する記事です の概要 動機付け まず （ここでは過程）のモチベーションを確認しておきます 今 手元に以下のようなデータ点があるとします これらのデータをグループ分けするタスククラスタリングを考えます この場合 混合正規分布を使うのが適当です 直感的には 混合数がかくらいですね 手元にあるデータ とりあえず混合数と両方で推定しておいて モデル比較でより良いモデルを決定できます 今回はモデルがつだから簡単です しかし トピックモデルのように候補が何通りも出てくる場合にはコストがかかります 混合数もデータから推定する方法はないでしょうか 混合モデルは複数の統計モデルを確率的に重みづけしたものですから 全部での確率の分割の仕方を再考する必要がありそうです 従来のモデルパラメトリックモデルは 長さ確率の棒を以下のように分割するものと解釈できます 分割した棒の長さに応じて統計モデルを重み付けします この棒の長さはモデルのパラメータです この方法では 予め分割数を決め打ちする必要があります 下図は分割数の場合です 従来のモデリング 分割数の指定を避けるために 棒を無限に分割してみます どうせ全体がですから 重要でない統計モデルには短い棒が割り当てられます やってみたいこと 各棒の長さがモデルのパラメータですから パラメータが無限個に増えたことになります このように 無限次元パラメータ空間上のモデルを扱う枠組みを と言います ということで クラスター数分割数の指定問題に対する処方箋はパラメータの無限次元化です とは パラメータの次元を無限にしたときの推定を 推定と呼びます 定義は論文によって様々です 包括的にまとめたサーベイ論文として が詳しいです の代表格は過程と過程です この記事では過程は扱いません 主に過程です 過程といえば あたりが基本的な論文っぽいですね 無限次元拡張の影響で 主役は確率分布から確率過程に交代します つまり は確率過程の入ったモデルを扱う枠組みです 過程や過程も確率過程です 一般に 過程は回帰や分類に用います 過程は累積分布の推定や密度推定に用います この記事の構成 この記事は 以下のように構成されます まず次節では 主役である過程を導入します 過程で想定しているモデルと 典型的な問題設定を紹介します 続いて数学的な定義を述べます 数学的にはただの確率過程に過ぎません 実際に応用するにあたって 何かしらのサンプリング方法が必要です サンプリングの目的に応じて 種類のアルゴリズムを紹介します 節の最後には例題として 累積分布関数の推定問題を扱います その次の節では 過程混合モデルを紹介します このモデルはクラスタリングに応用でき 冒頭の問題に対する解決策を提示してくれます まずは典型的なクラスタリング問題を設定します 一般には推定方法として が用いられますが この記事では変分推論法を用います 変分推論法に関しては 過去の記事も是非参考にしてください なお 以下 測度 確率測度 分布 分布関数などはほとんど区別しないで用います 過程の導入 モデル 過程はいわば確率分布の確率分布です サイコロを振ると目が出てくる感じで 過程をシミュレートすると分布が出てきます 過程を用いると 冒頭の無限次元の分割の確率モデルを実現できます 過程を用いた推定での基本的なモデルは以下の通りです 集中度パラメータと基底測度は既知としますこれらに関しては後ほど モデル 過程モデル データを発生させた分布関数のモデリングに使えそうです ただし 過程が生み出すのは離散分布です まとめておくと 過程は無限次元の離散分布を生み出す分布確率過程です 過程の定義 過程を定義しておきます 定義 過程 可測空間 上の確率測度 と正の実数に対して 確率測度 が過程 に従うとは 任意のとの任意の有限分割 に対して 次式が成り立つことである このとき と書く を集中度パラメータ を基底測度と呼ぶ この定義だけでは推定に利用しづらいので 何かしらのサンプリング方法が必要です ここではつ紹介します つは棒折り過程です 冒頭の棒を無限個に分割する方法とほとんど同じです 棒折り過程によって 過程からのサンプルを計算できます つ目は中華料理店過程です これは過程からのサンプルに関して周辺化したもので 過程モデルにおけるデータのサンプリングに相当します 過程には集中度パラメータと基底測度というつのパラメータを持ちます 過程からのサンプルである分布は 基底測度のそこそこ似ています 実は期待値が基底測度に一致します その一致具合を調整するのは集中度パラメータです 改めて 過程とは 基底測度に似た無限次元の離散分布を生成する分布確率過程であると言い直すことができます アルゴリズム 棒折り過程 過程からのサンプルの構成方法として 棒折り過程を紹介します 冒頭の 長さの棒を無限個に分割する方法に相当します アルゴリズムを簡単に述べておくと まず長さの棒を用意します これをベータ分布からのサンプルの割合だけカットします カットした分だけ棒は短くなります 残った棒を 再びベータ分布からのサンプル分だけカットします この操作を繰り返します カットした棒を基底測度からのサンプルの位置に立てていくことで 過程からのサンプルを作ります 棒折り過程のアルゴリズムを以下に示します ただし はと約束します アルゴリズム 棒折り過程 棒折り過程を用いてサンプルを構成します 集中度パラメータを 基底測度を標準正規分布としてサンプルを個発生させ 下図に示しました 左図は 棒を立てた図です 右図はサンプルから計算した分布関数です 本来 棒折り過程ではループは無限回です 実際のプログラムでは有限回で打ち切ります 下図は回で打ち切っています コードの実行結果 アルゴリズム 中華料理店過程 過程モデルからのデータのサンプル方法として 中華料理店過程を紹介します 中華料理店過程では データを順次発生させます 最初は基底測度から始めて 番目のデータからは経験分布と基底測度の重みつき平均からサンプルします アルゴリズムは以下の通りです アルゴリズム 中華料理店過程 中華料理店過程を用いてデータを生成します 集中度パラメータを 基底測度を標準正規分布としてサンプルを個発生させ 下図に示しました 左図はデータのヒストグラムです 右図は生成したデータから計算した経験分布です このアルゴリズムではからのサンプルに関して周辺化してあるので 有限回のループで十分です コードの実行結果 実験 の推定 過程を用いた例題として 累積分布関数の推定問題を扱います 手元にサイズのデータがあるとします このデータを生成した分布の分布関数を推定します まず事前分布に過程を設定します 集中度パラメータを 基底測度を標準正規分布とします このとき 事後分布は以下の過程になります 以下が推定結果です 真の分布関数赤実線 事前分布からのサンプル青点線 事後分布からのサンプル橙一点鎖線を示しましたサンプルだけでは分かりづらいですね 反省 まあ 気持ち近づいているのかなって感じです ちなみに真の分布は正規分布 です コードの実行結果 過程混合モデル 問題設定 過程を用いた推定として 累積分布関数の推定問題を扱いました ここからは 過程の応用として 分布の密度推定クラスタリングを試します 過程混合モデルでは 以下のようなモデルを考えます パラメータ と基底測度は既知とします また 基底測度は既知の密度関数を持つとします 前半の文は棒折り過程 後半の文は潜在変数とデータの生成過程です モデル 過程混合モデル このモデルは混合数が無限大の混合モデルです 重要でない因子には低い確率が割り当てられると期待できるので無視できます 実験 変分推論法でクラスタリング 密度推定の方法として 変分推論法を紹介します 変分推論に関しては過去の記事でも何度か扱っています 今回用いるのは平均場近似による方法 です 他の推論方法として あります こちらは既存の文献 で詳しく解説されています 他にもスライスサンプリングによる方法があります 変分推論法や では無限和を有限で打ち切る必要が生じますが スライスサンプリングでは変数を追加することで解析的に有限和に置き換えます スライスサンプリングを使えば有限に帰着するというよりは の無限級数がほとんど確実に収束することがポイントです多分 次のようなデータ点を考えます データは全部で点あります これらを適当にグループ化クラスタリングします 過程混合モデルを用いると 予めクラスター数を定めずにデータから推定できます 普通の有限混合モデルの代わりに無限混合モデル過程混合モデルを用います ただし コンピュータの有限性から無限和を有限和で近似する必要が生じます コードの実行結果 観測値のモデル は正規分布 とします また 基底測度の事前分布は正規分布 とします 以上のモデルの下 近似分布を以下のように設定します は既知の整数です 無限個の因子の扱いは困難です ここではで打ち切っています これらを用いて頑張って計算すると 以下の更新式が得られます ここで 各分布のパラメータは以下のようになります はディガンマ関数です これらのパラメータを順に更新していきます 反復回数を回としました また としました 結果を以下に示します 最も確率の高いクラスターごとに色分けしました そこそこうまくいってそうです 元のデータは混合数の混合正規分布から生成しています 下図では個だけ無視されています 観測モデルや事前分布 ハイパーパラメーター等は工夫する必要がありそうです コードの実行結果 コード コード 初期化 コード 関数の定義 α α ₀ α コード 棒折り過程 α α コード 中華料理店過程 α α コード の推定 α α α コード 関数の定義 コード データの作成 θ π μ θ πθ πθ Σ μ₀ μ θ μ₁ μ θ μ₂ μ θ μ₃ μ θ μ₄ μ θ μ₀ Σ μ₁ Σ μ₂ Σ μ₃ Σ μ₄ Σ ₁ ₂ コード 推論の実行 α σ σ₀ α σ σ₀ ₁ ₂ 参考文献 最終アクセス 石井健一郎 上田修功 続・わかりやすいパターン認識ー教師なし学習入門ー オーム社 佐藤一誠 ノンパラメトリックベイズ 点過程と統計的機械学習の数理 講談社 記事一覧に戻る 
 深層学習の基礎修正版 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 深層学習の基礎（修正版） 最終更新 記事の内容 概要 問題設定と方針 アルゴリズムの構成 順伝播 誤差逆伝播 確率的勾配降下法 訓練の全容 分類してみる （素朴な実装） 問題設定 実験結果 とは 基本的な使い方 分類してみる　（で実装） 実験結果 コード 以前書いた記事の改訂版です 内容を修正し での実装例も追加しました 主に を参考にしました 概要 問題設定と方針 機械学習 特に教師あり学習は データを説明する適当な関数を定める問題として 以下のように定式化されます 目標 手元にサイズのデータ があるとき 適当なパラメータを持つ写像 を そこそこの予測性能を保ちつつ が達成されるように定めたい 適当な関数として 予め線形関数や周期関数のように限定して議論しても良いのですが 当然 写像の表現能力は制限されます そこで 複雑な表現を可能にするために 以下のような形を考えてみましょう これはいわゆるニューラルネットワークです この場合 写像のパラメータは以下のように表されます ここで 達は重みと呼ばれ 達はバイアスと呼ばれます また 達は活性化関数と呼ばれ 通常 やシグモイド関数などの非線形関数が選択されます 要するに ニューラルネットワークとは 線形変換と非線形変換を交互に繰り返した写像です ニューラルネットワークは深層学習の基本的なツールであり 深層学習の方針は以下の一文に集約されます 深層学習の方針 データを用いて ニューラルネットワークがいい感じになるようにを調整する いい感じの基準には様々考えられますが データへの当てはまりの良さを要求するのであれば 以下のような関数で測るのが自然でしょう データによく当てはまっているほど コスト関数の値は小さくなりますから 以下の最適化問題を解くのが目標です この最適化問題はニューラルネットワークの訓練と呼ばれ 解析的に解くのは難しいので 最急降下法で反復的にパラメータを更新していきます 問題となるのは勾配の計算です 目的関数への寄与が複雑な大量のパラメータの勾配を求めるのは一般に計算コストが高く 工夫が必要です そこで登場するのが誤差逆伝播法です まあ 実際にプログラムを書く際には自動微分で良いのですが 次節では 以上の方針を実現するための訓練アルゴリズムの全容をご紹介します アルゴリズム 本節では ニューラルネットワークの訓練アルゴリズムを構成する順伝播 誤差逆伝播法 確率的勾配降下法について説明します 順伝播 コスト関数の勾配計算には コスト関数の現在の値が必要であり そのコスト関数はデータとニューラルネットワークの二乗誤差の和で定義したので 予測値を求める必要が生じます データから予測値を計算する過程を順伝播と言いますが 要するにニューラルネットワークの定義式にデータを放り込んで計算するだけです 誤差逆伝播 誤差逆伝播法は コスト関数の勾配を求める方法です 次のようなベクトルを用意しましょう 活性化関数が全てシグモイド関数の場合 連鎖律から 次式が得られます ここで は要素ごとの積で を入力とした場合のをで表します 勾配を計算するには各が必要ですが 各は添え字の大きい方から計算する必要があります これは順伝播とは逆方向の演算なので 逆伝播と呼ばれます この計算は本質的に自動微分と同一ですので 実装する際には自動微分のライブラリを呼び出せばです本記事のプログラムでは自動微分を使わずに 素朴に実装しています 確率的勾配降下法 以上で勾配の計算はできそうですが 深層学習では 普通の最急降下法ではなく確率的勾配降下法を用います これは 各反復でデータの中からサンプルもしくは一部のサンプルを用いて最急降下法を適用する方法です 一部のサンプルを使うと反復ごとに勾配が異なるため 局所解から抜け出すことができると期待されます このサンプルは 例えば一様分布に従って選びます サンプルを使う場合の確率的勾配降下法の更新式は以下の通りです 勾配は先ほどの誤差逆伝播法から計算できます 訓練の全容 深層学習のアルゴリズムの基本的な形は以下の通りです の訓練 分類してみる （素朴な実装） 問題設定 本節では 素朴に実装した深層学習の小さめのの数値実験を 分類問題を例にご紹介します 今 平面上に以下のようなデータ点が散らばっているとします 各点には 赤丸のラベルと青バツのラベルが付けられています これらのデータから 平面を赤と青に塗り分けるのが目標です 要するに二値分類ですね 簡単のために 赤丸をベクトル 青バツをベクトル で表しておきます コードの実行結果 隠れ層が層のニューラルネットワークで分類を試みます 隠れ層のユニット数はとしておきます ニューラルネットワークの出力を次元にしておいて 第成分の方が大きければ赤丸 第成分の方が大きければ青バツと予測することにします 活性化関数は全てシグモイド関数 コスト関数はこれまで通り二乗和誤差とします ニューラルネットワークを式で表示しておくと以下のようになります 実験結果 以上の設定のもと 実際に訓練をしてみましょう コードは本記事の末尾の方に載せています 訓練回数は回とし ステップ幅を一律に としました そこそこうまく分類できていますね 分類の境界はやや粗く コスト関数も思ったほど減少していません 素朴な実装としてはまずまずでしょうか コードの実行結果 とは 以上のようにゼロからコードを書いても良いのですが やはり問題ごとにいちいち書き換えるのも面倒だし 速度的にも限界があります の場合 が便利です 以下に簡単な実装例を示します もちろん アレンジすれば単純な深層学習モデル以外の発展的なモデル簡単に実装できます 中の人は 変分推論法や変分オートエンコーダなどもで書いています 基本的な使い方 を使ってみましょう まず ニューラルネットワークを定義してみます の中に 各層を表すを入れます にはインプットの次元 アウトプットの次元 活性化関数を指定します ニューラルネットワークの作成・初期化 以下のような結果が返ってきます これで初期化完了です ニューラルネットワークの作成・初期化 結果 次に コスト関数を定義します コスト関数の定義 とりあえず現時点でのコスト関数の値を計算してみます 訓練前のコスト計算 訓練前のコスト計算 結果 この状態から訓練して コスト関数を減少させてみましょう 訓練前に更新方法を指定します 今回はと呼ばれる方法を使ってみます ステップ幅を適応的に決めてくれるやつです の呼び出し の呼び出し 結果 では 確率的勾配降下方をイメージして 番目のデータだけを用いて パラメータを回だけ更新してみます 関数には コスト関数 モデルのパラメータ 使うデータ 更新方法を指定します ニューラルネットワークのパラメータはで取り出すことができ パラメータだけを別で管理できます 訓練 パラメータを更新できたので この時点でのコスト関数の値を計算してみます うまくいっていれば値は先ほどより減少しているはずです 訓練後のコスト計算 訓練後のコスト計算 結果 データを個分しか使っていないので 今回は失敗しました コスト関数の値が増加しています 以上をまとめて次のように書けば ニューラルネットワークの訓練が実行できます ニューラルネットワークの訓練 分類してみる （で実装） 先ほどの分類問題を 今書いたコードで解いてみましょう 実験結果 先程の素朴な実装とは多少条件が異なります 層は層増え にはを指定しています 実行結果は以下の通りです コスト関数は先ほどに比べ 大きく減少しています また 分類の境界も滑らかですね コードの実行結果 コード コード 初期化 コード ニューラルネットワークの定義 コード 順伝播と逆伝播 コード 訓練用の関数 ε ε ε ε ε コード 実験用の関数 ₁ ₂ ₁ ₂ コード データの作成 コード 素朴な実装で実験 ε ε ₁ ₂ ₁ ₂ コード で実験 ₁ ₂ ₁ ₂ ₁ ₂ ₁ ₂ 参考文献 岡谷貫之 深層学習 講談社 記事一覧に戻る 
 変分推論法（修正版） 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 変分推論法（修正版） 最終更新 記事の内容 変分推論法の概要 問題設定 基本的なアイデア 平均場近似 平均場近似の考え方 例 正規分布のパラメータ推論 確率的変分推論法 確率的変分推論の考え方 例 ロジスティック回帰 例 の分類問題 コード 以前書いた記事の修正版です モデルやプログラムを修正し 例を追加しました 変分推論を具体例を用いて説明します 最も有名な平均場近似を用いた手法と ミニバッチ学習に対応した確率的変分推論法を紹介します 確率的変分推論法は 元々 で提案された手法ですが ここではもっと広い意味で用いています 原論文では確率的最適化と自然勾配の考え方を用いていますが ここでは「確率的最適化をベースとした変分推論法」程度の意味で用いています 変分推論法の概要 問題設定 変分推論は 複雑な事後分布をより単純な近似する方法です サンプリング法であるとは違って最適化がベースであり 一般に変分推論法の方が高速です まず どういう状況で用いる手法なのか 問題設定を確認しておきましょう 手元にデータ があるとします このデータを発生させた分布を推定することが目的です モデルをでモデル化したとします ここで はパラメータです このパラメータの事前分布をとすると以下の事後分布が計算できます この事後分布の平均を計算したり モデルを事後分布で重みづけて予測分布を計算するには事後分布が複雑すぎる場合 や変分推論法が用いられます 次に 変分推論法の基本的なアイデアを述べます 基本的なアイデア 変分推論法では 事後分布を近似する分布を構成します 目標は 次のような分布を 予め定めた分布族から見つけることです ここで 次の点が問題になります 近似分布は事後分布にどういう意味で近いのか 分布族はどのように設定するか まず点目 分布間の近さは ダイバージェンスで測るのが自然です 近似分布と事後分布の間の ダイバージェンスが最小になるように近似分布を定めます もう少し詳しく見てみましょう 次のような数量を定めます すると と の間の ダイバージェンスは 次のように書けます ダイバージェンスが非負であることから 次式が得られます が周辺尤度（エビデンス）の下界であることから この量を と呼びます 当面の間の目標は ダイバージェンスの最小化ですが これはの最大化と等価です なお の符号反転は変分自由エネルギーと呼ばれます 次に点目です 分布族の決め方はいくつかあります 最も有名な方法が平均場近似です 平均場近似では 近似分布を具体的には指定せず 事後分布が都合よく分解できると仮定します 分解できるという仮定のみでも 事後分布はいい感じに求まります 他には 予め分布を指定する方法があります 例えば予め正規分布で近似できると仮定して パラメータを決めてやります 以下 このつのアイデアを詳しく掘り下げていきます 平均場近似 平均場近似の考え方 平均場近似では 近似分布が属する分布族を次のように定めます ただし とします ある確率（密度）関数 が存在して このような分布族から持ってきた近似分布について 各 に対して は次のように書けます ここで は正規化定数で 上式の期待値は次のようにとります つの分布が一致するときにダイバージェンスが最小になることから 各 に対して因子が定まっているときに と因子を更新することで が最大になります 適当な初期分布から初めて更新を繰り返していけば がどこかで頭打ちになるはずです このとき近似分布は事後分布に十分近いと期待します 例 正規分布のパラメータ推論 ここでは例として 正規分布の平均と精度の事後分布を推定します モデルが正規分布で パラメータが平均パラメータと精度パラメータにあたります 次のような生成過程を考えます は定数です このとき事後分布は次のようになります 例えばこの分布の平均を求めるのは困難です ということで変分推論法を行います 次のように分解されるとします 先ほど導出した期待値計算を含む分布を導出すると 以下のようになります の近似分布は正規分布 の近似分布はガンマ分布であることが分かります それぞれの分布を次のようにおきます すると 次のように書けます これを更新式として 次のようなアルゴリズムが得られます 実際には が上記の更新で変化しないので ループの外に出して実装します 正規分布に対する変分推論アルゴリズム ちなみに の値は以下の通りです ただし はガンマ関数 はディガンマ関数です 以下に実験結果を示します 真の分布は混合正規分布 としました この分布からデータを点発生させました とします また 初期値は とします 左下図の等高線は 近似事後分布です また によって真の事後分布からサンプルし プロットしました緑点 実際の事後分布と近似事後分布は一致しているように見えます また 右下図は の変化の様子を示しました 回目の更新で収束しています コードの実行結果 近似事後分布からサンプルを発生させて 予測分布を計算し橙実線 真の分布赤実線と比較しました さらに で計算した予測分布緑破線を計算しました青色 コードの実行結果 確率的変分推論法 確率的変分推論の考え方 平均場近似による方法は基本的に高速なのですが 更新式が常に導出できるとは限りません そこで 予め分布を指定して を勾配上昇により増加させる方法を考えます 例えば正規分布などの簡単な分布を仮定して 近似分布のパラメータをいい感じに調節し 近似精度向上を目指します 近似分布をと表示しておきましょう パラメータを調節して ダイバージェンスの最小化 もしくはそれと等価なの最大化を目指します を具体的に書き出すと 以下のようになります これを 確率的勾配降下法と同じ要領で次のように近似します そして 最急上昇法により 次のように最大化していきます 以上の流れをアルゴリズムとしてまとめておきます 確率的変分推論アルゴリズム 以下に 確率的変分推論の例をつほど挙げます 例 ロジスティック回帰 例として 以下のようなロジスティックモデルを考えましょう ただし はシグモイド関数です データ が手に入ったときの事後分布を計算します 事後分布の解析的計算は難しいので 変分推論法を利用してみましょう の近似事後分布として 以下のような次元正規分布を使います 近似分布の平均と標準偏差を近似事後分布のパラメータとします 対数をとることで 調整したいパラメータの制約を取り払うことができます このとき 最大化したいは以下のように計算できます 残った積分は モンテカルロ近似で計算できます 以下に実験結果を示します 本来未知のパラメータ の真値をそれぞれ とし サイズの入力データを一様分布 対応する出力データをロジスティックモデルから作っておきました これらをデータとみなした時の 変分推論法の結果と比較用のの結果を示します 左図には 真値赤点 近似事後分布等高線 で計算した真の事後分布からのサンプル緑点を示し 右図には 反復中のの変化を示しました 変分推論法との結果は概ね一致している一方で 真値は外しているようです コードの実行結果 変分推論法の反復回数は回 の初期値をゼロベクトルとし 事前分布のパラメータ をそれぞれゼロベクトルとに設定しました さらに 予測分布 の計算結果も示します 図には 真値赤実線 変分推論法の結果橙実線 の結果緑破線のつを示しました コードの実行結果 真値を外しているものの 予測性能は良さそうです 例 続いて 分類問題を考えます 下の画像のようにいくつかの点とそのラベルが与えられているとします 点個がつのデータであり 対応するラベルが赤丸と青バツです 全部で点あります このつのクラスの間を仕切る境界の推定が目標です 要するに二値分類です コードの実行結果 記号を導入します 平面上の各点に対して 対応するラベルデータ が与えられているとします サンプルサイズはとして データを次のようにまとめておきます 今の場合 です 赤い点のラベルをとし 青いバツのラベルをで表しておき モデルを導入します 今回は を考え 赤い点に分類される確率をモデル化します まず 次の を定義します ここで はシグモイド関数 中間層のユニット数をとし はパラメータをまとめたベクトルとします この を用いて 次のようなモデルを仮定します 事前分布として 以下の正規分布を仮定しておきます 重みパラメータの事後分布を求めたいのですが が絡むことでモデルへの寄与が複雑になります このまま解析的に扱うのは難しそうなので 変分推論法を用います ここでは 次のように近似分布を定めます このとき 最大化したいは以下のように計算できます 右辺の積分はモンテカルロ近似で計算できます 実験結果を示します 比較用に通常のニューラルネットワークに訓練結果も用意しました 下図は コスト関数を二乗誤差 反復回数をとし を用いた際の予測確率左図と反復中のコスト関数の値の変化右図です コードの実行結果 次に変分推論法の適用結果を示しておきます 反復回数は回 事前分布の精度は としました 下図は予測確率左図と反復中のの値の変化右図です コードの実行結果 は増加していますが 予測はうまくいっていませんね コード コード 初期化 コード 平均場近似用の関数定義 β μ λ μ λ μ λ λ √λ λ β μ μ λ β μ λ α β λ αβα α α βα α β π αλ μμβ μλβ αββ β β β μ λ α β β β μ λ α β λ αβ μ αλβ β β μ μ λ β μ λ α β コード データ作成 μ₁ μ₂ σ₁ σ₂ μ₁ σ₁ μ₂ σ₂ コード 利用結果 β ββ μ λ μμ λλ コード 平均場近似利用結果 μ λ α β μμ λλ αα ββ コード 結果の可視化 μ λ μ λ μ λ μ λ コード 予測分布の計算 μ λ μ μ √λ μ λ μμ λλ コード 関数定義 Δ α Δ ≤α ₀ ₀ ₀ ₀ ₀ ₀ ∇ ₀ ∇ η ₀ ₀ η η ₀ η ₀η ₀ η ₀ ₀ η ₀ ₀ ₀ ₀ η η η ₀ ₀ η ₀ ₀ η ₀ ₀ η ₀ ₀ η η η η η η η コード データの作成 ₁ ₂ ₁₁ ₂₂ ₁₂ ₁ ₂ ₁₂ コード 利用結果 ₀ ₀ コード 確率的変分推論法利用結果 ₀ ₀ η コード 結果の可視化 ₁ ₂ ₁ ₂ η ₁ ₂ ₁ ₂ コード 予測分布の計算 η コード 可視化用関数定義 コード データ作成 コード ニューラルネットワーク利用結果 ₁ ₂ ₁ ₂ コード 関数定義 η η η η η η η η η η η η η η η η η η η η コード 確率的変分推論法利用結果 η コード 予測結果 ₁ ₂ ₁ ₂ η 参考文献 ビショップ パターン認識と機械学習 丸善出版 渡辺澄夫 ベイズ統計の理論と方法 コロナ社 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
 の勾配近似方法を比較する（修正版） 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 の勾配近似方法を比較する（修正版） 最終更新 記事の内容 動機と概要 変分推論法と勾配近似 近似方法 スコア関数推定 近似方法 実験 実験内容 実験結果 以前書いた記事の修正版です 扱う問題 プログラム 構成等を変更しました 動機と概要 変分推論法と勾配近似 タイトルにあるの勾配の必要性について確認しておきましょう 手元にデータ があり モデルとパラメータの事前分布を作ったとします 事後分布の推定のために変分推論法を使う場合 事後分布の近似分布を自分で作り 次式で定義されるを最大化します 第項は近似事後分布と事前分布の間の ダイバージェンスです 確率的変分推論法を使う場合 上式の勾配計算が必要です 本記事では 以下の勾配計算について考えていきましょう 積分と微分の交換ができると仮定すると 次式の計算が必要になります この式は一般にモンテカルロ近似できるとは限らないので 工夫が必要です 近似方法としては以下のつが有名です スコア関数推定 無理矢理 密度関数の部分を作り出してからモンテカルロ近似する方法 近似事後分布のパラメータをの部分に押し付けてからモンテカルロ近似する方法 適用範囲が広いのは前者ですが 後者は一般に分散が小さくなることが知られています 分散が小さいほど 更新の効率が良くなります 本記事では 両者でどれくらい勾配計算のばらつきに差が出るのかを検証します 近似方法 スコア関数推定 スコア関数推定についてもう少し詳しく説明します この方法では 次式に着目して密度関数部分を作り出します この式から 積分の勾配は以下のように近似できます 近似方法 について説明します ここでは 近似分布が以下の正規分布であると仮定します では 以下の変数変換に着目します 従って 積分の勾配は以下のように近似できます ここで は 標準正規分布の密度関数です 実験 本節では ばらつきの観点から が望ましいことを実験により確認します 実験内容 前節で考えた積分の勾配のモンテカルロ近似のばらつき具合を計算します 以下のような記号を導入しておきましょう 上のつの和はいずれも確率変数であり これら確率変数の平均と標準偏差を調べます 平均と標準偏差は 上の確率変数のサンプルを個作ることで推定し は予め適当な回数反復して更新したものを使います サンプルサイズを変化させた時の変化も見たいので 結局次のような手順を踏みます 実験手順の概要 今回は こちらの記事のロジスティック回帰の例で試してみます 実験結果 実験結果を示します 反復回数 最大サンプルサイズ サンプル数としました 下図は スコア関数推定の結果で の各成分ごとの微分値を表示しました 横軸はサンプルサイズで 青線が平均 薄い青領域がシグマ範囲です コードの実行結果 下図は の推定結果です 全体的にスコア関数推定よりもばらつきが小さいですね 精度的にはサンプルでも十分かもしれません コードの実行結果 コード コード 初期化 コード 変分推論用の関数定義 η ₀ ₀ η η ₀ η ₀η ₀ η ₀ ₀ η ₀ ₀ ₀ ₀ η η η ₀ ₀ η ₀ ₀ η ₀ ₀ η ₀ ₀ η コード 実験用の関数定義 η η η η η η η ηη η η η η ηη η η η η η η η η η コード 変分パラメータの推定 ₁ ₂ ₁₁ ₂₂ ₁₂ ₁ ₂ ₁₂ ₀ ₀ η コード 実験 η η コード スコア関数推定の結果可視化 η₁ η₂ η₃ η₄ σ ∂η コード の結果可視化 η₁ η₂ η₃ η₄ σ ∂η 記事一覧に戻る 
 射影定理と関数近似 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 射影定理と関数近似 最終更新 記事の内容 射影定理 空間と空間 射影定理 応用 最小二乗近似 正規方程式の導出 例 いわゆる最小二乗法 例 最小二乗多項式 応用 直交関数展開 一般化級数展開 例 級数展開 例 多項式 例 近似 コード 関数解析の重要な結果のつである射影定理と その応用としての近似理論について簡単にまとめておきます 最初の節で 射影定理を導入し 続く節でその応用を数値実験結果とともに紹介します 射影定理 空間と空間 関数解析学は 空間と空間を舞台に展開されます 本記事では主に空間を扱います まずはこれらの空間を定義しておきましょう 定義 空間と空間 以下のからを定める 実数体上のノルム空間 の任意の列が収束するとき は完備であるという 完備なノルム空間を空間という 実数体上の内積空間 は 内積によって誘導されるノルム に関して完備であるとき 空間であるという 以下 上の内積を以下のように定めます ただし は測度です このとき は空間です 射影定理 次に 空間における射影定理を述べておきます 定理 射影定理 空間 の閉部分空間について 任意のに対して あるが存在して 次式が成り立つ さらに 任意の に対して が成り立つことと に対するの存在の一意性は同値である 部分空間の閉性は以下のように保証されます 命題 有限次元部分空間は閉である ベクトル空間の有限次元部分空間は閉である 応用 最小二乗近似 この節では 射影定理の応用として 最小二乗近似を説明します 機械学習系の書籍では正規方程式を微分により導出しますが ここでは射影定理との関係を強調した形で述べます 問題設定と正規方程式の導出 問題設定を確認しておきましょう 空間 の内積から誘導されるノルムを と表しておきます この空間の既知の元 によって生成される部分空間をと表します このとき 任意のを既知のベクトル の一次結合で近似する問題 つまり 次の最小化問題を考えます 部分空間は有限次元なので 閉であり 射影定理により上の最適化問題の解の存在が保証されます さらに 解の存在が一意ならば 各 に対して次式が成り立ちます したがって 次式が成り立ちます この方程式は正規方程式と呼ばれ この解が求めたい係数です 空間とノルムを適切に定義することで 様々な問題に適用でき ここでは いわゆる最小二乗法と 最小二乗多項式の問題を考えます ちなみに 基底ベクトル の一次独立性と 解の一意性は同値です 例 いわゆる最小二乗法 いわゆる最小二乗法を考えます 既知の入力データ に対して 既知の基底関数 を通して 既知の出力データ によく当てはまる直線を計算します すなわち 標準内積の入った空間 において 二乗距離の意味で以下のように近似します ただし は以下のように定めます これは計画行列と呼ばれ 正規方程式は以下のように表示できます 実験してみます サイズがの入力データを からの間の一様乱数 出力データを次の式から生成します 上式は本来未知であり 近似の対象です 基底関数を以下のように定めます 近似の結果が以下のとおりです 真の関数赤実線 最小二乗近似関数緑破線 データ青バツを示しました 基底関数の配置にも依ますが 結構外していますね コードの実行結果 例 最小二乗多項式 有界閉区間上の関数を 有限次数の多項式で近似する問題を考えます いま 空間 上の関数列 をとり 関数 を 高々次の多項式で この内積が誘導するノルムに関して最小二乗近似してみましょう すなわち のように近似します 正規方程式は以下の通りです 係数行列は行列と呼ばれます 例として 対数関数 の多項式近似を考えてみましょう 最高次数次 次 次の場合を下図に図示しました コードの実行結果 応用 直交関数展開 一般化級数展開 最小二乗近似では 正規方程式を解く必要がありますが 一般に 係数行列の性質は良くないので 正規方程式は回避したいところです 係数行列にはベクトルの内積が登場するので 正規直交系をうまく使えば正規方程式を解かずに済みます この方針を実現する方法として 以下のような結果が知られています 定理 一般化級数展開 可分な空間 の正規直交系に直交するベクトルがゼロベクトルのみのとき 任意のは と一意に展開できる コンピュータで実装する際には この和を有限で打ち切る必要があります また 正規直交系は の正規直交化法を使って構成できます 例 級数展開 空間 上の完全正規直交系 に関する一般化級数展開は いわゆる複素級数展開です 例 多項式 空間 上の完全正規直交系 は 単項式列 に の正規直交化を施して得られ 多項式と呼ばれます 関数を次 次まで近似した結果を下図に示しました 多分次式のように近似できます コードの実行結果 例 近似 空間 上の直交系として 多項式を考えます ここで 内積を以下のように定めます 多項式は以下の漸化式により定まります この直交系を用いて 次のように展開できます 関数 を次 次 次まで展開した結果を下図に示しました 多分次式のように近似できます コードの実行結果 この近似は 最大値ノルム に関しても収束します 最大値ノルムに関する最良近似をミニマックス近似といい の多項式近似定理により ミニマックス近似多項式の存在が保証されます しかし 実際にミニマックス近似多項式を求めるのは困難で 代わりに近似が利用されることがあります ちなみに 最大値ノルムはいかなる内積からも誘導されないため 空間の枠組みでは扱うことができません コード コード 初期化 コード 関数定義 μ σ μ σ μ σ Φ μ σ Φ ΦΦ μ σ μ σ コード 実験 μ σ コード 関数定義 コード 実験 コード 関数定義 コード 実験 コード 関数定義 π π π コード 実験 参考文献 関数解析による最適理論 コロナ社 森正武 数値解析 共立出版 杉原正顕 室田和夫 数値計算法の数理 岩波書店 近似理論入門 共立出版 記事一覧に戻る 
 変分オートエンコーダ修正版 数値実験部屋 ホーム 記事一覧 このサイトについて プライバシーポリシー フォーム 数値実験部屋 変分オートエンコーダ（修正版） 最終更新 記事の内容 概要 動機付けと記事の構成 モデルと方針 画像データへの応用 変分オートエンコーダ 実験結果 コード 以前書いた変分オートエンコーダの記事の修正版です 説明を詳しくし 改めて実験を行いました 変分オートエンコーダを扱った書籍やネット上の記事はうまくいくように モデルやコードがかなり最適化されている印象がありますが 本記事ではかなり素朴に実装しています したがって 結果もそんなに綺麗ではありませんが 概要 動機付けと記事の構成 手元に画像データが大量にあるとします 白黒の画像データの場合 画像はからの間の実数値が各ピクセルに並べられた行列と考えることができます 例えばの手書きの文字データであれば 端の方は黒っぽい色が広がり 真ん中らへんに白い部分が連続的に位置するので 行列の各成分はバラバラな値を取るわけではなく 何かしらの法則性があると考えるのが自然です こう考えると画像データの自由度はデータそのものよりも極端に低く もっと低次元の空間上に分布していそうです そこで 手元のデータが生成される前に データの低次元表現が潜在的に生成されていると想定することにします この想定のもと 次のような目標を立てておきます 目標 データの生成過程を想像し 統計モデルを作り データの低次元表現 潜在表現を得たい！ この目標を達成するためのアプローチとして この記事では データ生成過程のモデル 変分オートエンコーダを説明します この記事の構成は以下の通りです 第節概要では 本記事で扱う生成モデルの大枠を示します モデルのおおよその形と学習の方針をできるだけ一般的な形になるように述べました 次のセクション モデルと方針では 変分推論法から出発して 最適化問題として定式化し 通常の変分推論と異なる点を明示した上で 学習アルゴリズムの概要を示しました その次のセクション では 目的関数の勾配計算で必要になる近似計算方法を説明しました 次節 画像データの応用の最初のセクション 変分オートエンコーダでは 本節で導入した一般的なモデルと学習方法を具体例を通じて再構成することで 変分オートエンコーダを説明します 続くセクション 数値実験では データへの適用結果を示します 要するに 抽象から具体へと進むように構成しています モデルと方針 それでは もう少し具体的に定式化しておきましょう 手元のデータ に対して 以下のようなモデルを考えます モデル このモデルを用いて 潜在変数たち の事後分布を求めるのが目標です あとで見る例もそうですが 一般に 上の事後分布を解析的に計算するのは困難です そこで 変分推論法の適用を考えます 次のような近似分布を用意しましょう 変分推論法では が属する分布族を指定し 近似事後分布のパラメータは次のような最小化問題を解くことで定めます この他にも モデルに未知のパラメータとがありますが これらは周辺尤度最大化により定めます つの最適化問題が登場しましたが それぞれの目的関数同士は以下のような関係にあります ここで は変分推論法でいうところので としました ということで を最大化することでつの最適化問題を 近似的にですが 同時に解くことができそうです すなわち 事後分布の近似も良くなり かつモデルも良くなると期待できます 完全なモデルの場合 周辺尤度は定数ですが 今回は学習中に変化する点に注意してください 以上の考え方をまとめます まずは 既知の情報と未知の情報をまとめておきます 既知 未知 決め方 変数 既知 データから分かる データ データサイズ データの次元 人間が決める モデルが属する分布族 事前分布が属する分布族 近似分布が属する分布族 潜在変数の次元 未知 分布を推定 潜在変数 点推定 近似分布のパラメータ モデルのパラメータ 事前分布のパラメータ 用意したデータとモデルに対して 以下の最適化問題を解くことで 事後分布の近似とモデル選択を同時に実行します 最大化は確率的勾配上昇法により実行します おおよそ次のようなアルゴリズムになります 今回使う学習アルゴリズム アルゴリズム中に出てくるは のミニバッチ版で サイズをとするとき 次式で定義されます は積分を使って定義されるため 近似事後分布のパラメータに関する勾配計算は自明ではありません 次のセクションでは うまい変数変換をみつけることで勾配を近似する方法を説明します ここでは を説明します アルゴリズム中に出てきた次の勾配計算を考えましょう ということで 勾配 が計算できれば十分です 右辺第項のダイバージェンスの勾配はは何とか計算できるとして 第項の勾配 を考えましょう 単純に演算子を積分の中に入れると密度関数が微分されてしまい 一般にモンテカルロ近似ができません もし適当な変数変換によって と変換できれば 以下のように計算できます ここで は行列です もし がに依存しない密度関数になれば 次式のように計算できます 以上の近似計算を といいます ポイントはいい感じの変換を見つけられるかどうかですが 近似分布が正規分布ならうまくいきます なお 上の説明ではに関する勾配計算を考えていますが とに関する勾配も上の近似式中のを置き換えて計算できます 画像データへの応用 それでは いよいよ画像データに前節の枠組みを適用します ここまで色々説明してきましたが データ以外に用意するものは以下の通りです モデルが属する分布族 潜在変数の事前分布が属する分布族 近似分布の各因子が属する分布族 潜在変数の次元 その他 変数変換 ミニバッチサイズと のサンプル数 これらを用意しながら 画像データへの応用を説明します 変分オートエンコーダ この節では変分オートエンコーダ を導入します いま 手元に画像データ があるとします ここで 各は画像をベクトル化したものとします この画像の生成過程を以下のように想定します モデル 変分オートエンコーダ ここで はを重みパラメータとするニューラルネットワークで デコーダと呼ばれる 事前分布を標準正規分布にしたので 前節のをここでは無視します 低次元の潜在表現から高次元の画像データへの変換の過程は複雑であることが予想されるため モデルにニューラルネットワークを組み込むのは自然な選択です しかし 副作用として推論が複雑になるため 前節のような近似的な枠組みが有効に機能します モデルのイメージ図 次に 事後分布の近似分布を定義しましょう 近似分布の各因子は以下のような 正規分布としましょう ここで 近似事後分布の平均と標準偏差パラメータは 以下のように を重みとするニューラルネットワークの出力とします すべてので共通なパラメータを用いることで データサイズに依らず効率的に学習できます ちなみにこのニューラルネットワークはエンコーダと呼ばれます このとき は以下のように計算できます 問題は ですが 以下の変数変換を考えます このとき 変換後のの分布は標準正規分布になります したがって の勾配は以下のように近似計算できます 以上をまとめて 次のような学習アルゴリズムを用います の学習アルゴリズム ただし 以下の実装ではの符号反転の最小化として訓練を行っています 実験結果 それでは を用いた実験結果を示します の訓練データ 枚を用いて 変分オートエンコーダを訓練しました 前処理として 各画像データはベクトル値に変換し としています また 潜在変数の次元は可視化しやすいようにとしました ミニバッチのサイズは のサンプル数はとしました 最大エポック数はとし 確率的勾配降下法に学習率を に設定したを用いて の符号反転最小化を目指します また には デコーダの重みパラメータの二乗ノルムの乗 に を乗じた正則化項を付加しています 次に デコーダとエンコーダの構成は以下の通りです 行列に関しては平均 標準偏差 の正規分布からの乱数で初期化し バイアス項はゼロベクトルで初期化しています 下図は 学習中のの符号反転の変化です 最初にストンと落ちてからはかなり緩やかに減少しています エポックも要らないかも コードの実行結果 今回はとしていますので 潜在変数を次元平面にプロットして可視化できます 下図に 各潜在変数の期待値を最初の個分だけプロットし 正解ラベルごとに色分けしています うまく分離できていない部分もありますが 何となく数字ごとに分かれているように見えます コードの実行結果 先ほどは各画像データの潜在表現を平面上に図示しましたが 逆に平面上の適当な点から新たに画像を生成することができます 下図は 平面上に等間隔で打った代表点から生成した画像を並べたものです このように 潜在空間内では 各数字画像が連続的に変化しています コードの実行結果 さらに 潜在空間内で連続的に動いた場合の画像の変化をアニメーションで示します 一番左は潜在空間内を放物線に沿って動き 中央は潜在空間内を直線に沿って動き 一番右は潜在空間内を単位円周に沿って動いたときに生成される画像の変化です コードの実行結果 コード コード 初期化 コード モデルと関数の定義 コード 画像データの用意 コード の訓練 コード 訓練損失のプロット コード 潜在空間の可視化 ₁ ₂ コード 画像の生成 コード アニメーションで表示 π 参考文献 須山敦志 ベイズ深層学習 講談社 記事一覧に戻る 
